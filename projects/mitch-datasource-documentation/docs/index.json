[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "js/AjaxDatasource.js",
    "content": "import axios from 'axios';\nimport DatasourceBase from './DatasourceBase';\nimport QueryBuilder from './QueryBuilder';\n\n/**\n * Datasource to retrieve and manage\n * data from a remote endpoint.\n *\n * @example <caption>Basic Usage</caption>\n *\n * import { AjaxDatasource } from 'mitch-datasource';\n *\n * async function exampleAsyncFunction() {\n *   let datasource = new AjaxDatasource({\n *     ajax: 'https://path/to/remote/endpoint'\n *   });\n *   await datasource.update();\n *   console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\n * }\n * exampleAsyncFunction();\n *\n * @example <caption>Basic Usage with Options Object</caption>\n *\n * import { AjaxDatasource } from 'mitch-datasource';\n *\n * async function exampleAsyncFunction() {\n *   let datasource = new AjaxDatasource({\n *     ajax: {\n *       // Note pagination/sorting/filtering doesn't\n *       // work with this fake endpoint, as even when\n *       // we send the datasource parameters, the\n *       // remote endpoint won't actually vary\n *       // the returned dataset.\n *       url: 'https://jsonplaceholder.typicode.com/posts',\n *       method: 'get',\n *       // ... Other Axios options\n *       // `mapper` is a custom option unique to the datasource package,\n *       // it's not actually part of Axios\n *       mapper: function(response) {\n *         return {\n *           data: response.data,\n *           total: response.data.length,\n *         }\n *       }\n *     }\n *   });\n *   await datasource.update();\n *   console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\n * }\n * exampleAsyncFunction();\n *\n * @example <caption>Basic Usage with Function</caption>\n *\n * import { AjaxDatasource } from 'mitch-datasource';\n *\n * async function exampleAsyncFunction() {\n *   let datasource = new AjaxDatasource({\n *     ajax: async function(queryBuilder) {\n *       return await mockAjaxCall(queryBuilder);\n *     }\n *   });\n *   await datasource.update();\n *   console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\n * }\n * exampleAsyncFunction();\n */\nclass AjaxDatasource extends DatasourceBase {\n  /**\n   * The constructor, taking in an options object.\n   * For more passable options, see\n   * {@link DatasourceBase#constructor}\n   * @override\n   * @param {String|Function|Object} options.ajax\n   * Defines the behavior of the AJAX call.\n   * If a string, remote endpoint to contact.\n   * If a function, it'll call the function\n   * when data is requested. If an object,\n   * will use the object to configure\n   * the AJAX call.\n   */\n  constructor(options = {}) {\n    let { ajax } = options;\n    if (ajax && typeof ajax === 'object') {\n      ajax = {\n        ...AjaxDatasource.prototype.defaults.ajax,\n        ...ajax,\n      };\n    }\n\n    const mergedOptions = {\n      ...AjaxDatasource.prototype.defaults,\n      ...options,\n      ajax,\n    };\n\n    super(mergedOptions);\n\n    /**\n     * The total amount of data items to page through.\n     *\n     * @access private\n     * @type {Number}\n     */\n    this._total = null;\n\n    /**\n     * The array of data items.\n     *\n     * @access private\n     * @type {?Array}\n     */\n    this._data = null;\n\n    if (mergedOptions.queryBuilder instanceof QueryBuilder) {\n      /**\n       * The query builder which constructs\n       * either the query object to pass to\n       * post/delete/put requests, or the\n       * query string to pass to get\n       * requests.\n       *\n       * @access public\n       * @type {QueryBuilder}\n       */\n      this.queryBuilder = mergedOptions.queryBuilder;\n    } else if (mergedOptions.queryBuilder) {\n      this.queryBuilder = new QueryBuilder(mergedOptions.queryBuilder);\n    }\n\n    /**\n     * Property defining the behavior\n     * of the AJAX call.\n     * If a string, remote endpoint\n     * to contact. If a function,\n     * it'll call the function when\n     * data is requested. If an object,\n     * will use the object to configure\n     * the AJAX call.\n     *\n     * @access public\n     * @type {String|Function|Object}\n     */\n    this.ajax = mergedOptions.ajax;\n  }\n\n  /**\n   * Performs an AJAX call.\n   *\n   * @access private\n   * @param {Object} axiosOptions Ajax options object for axios\n   * @param {String} axiosOptions.url Url to remote endpoint to ajax for.\n   * @param {String} axiosOptions.method The AJAX method, i.e. 'get', 'post', etc.\n   * @return {Promise} Returns the axios promise object, containing\n   *                   the response from remote endpoint.\n   */\n  _ajaxCall({ url, method }) {\n    const actualAxiosOptions = { url, method };\n    actualAxiosOptions.method = actualAxiosOptions.method\n      ? actualAxiosOptions.method.toLowerCase()\n      : actualAxiosOptions.method;\n    if (actualAxiosOptions.method === 'get') {\n      actualAxiosOptions.url = `${actualAxiosOptions.url}?${this.queryBuilder.getQueryString(this)}`;\n    } else {\n      actualAxiosOptions.data = this.queryBuilder.getQueryObject(this);\n    }\n    return axios(actualAxiosOptions);\n  }\n\n  /**\n   * Builds an AJAX handler function.\n   * @access private\n   * @return {Function} A callback function which performs\n   *                    the actual ajax operation.\n   */\n  _buildAjaxHandler() {\n    const ajaxHandler = {\n      function: () => this.ajax.call(this, this.queryBuilder),\n      string: () => {\n        const url = this.ajax;\n        return this._ajaxCall({\n          url,\n          method: 'get',\n        });\n      },\n      object: () => {\n        this.ajax.method = this.ajax.method || 'get';\n        return this._ajaxCall(this.ajax);\n      },\n    };\n    const ajaxObjectType = typeof this.ajax;\n    const actualAjaxHandler = ajaxHandler[ajaxObjectType];\n    if (!actualAjaxHandler) {\n      throw new Error(`Does not support provided ajax object of type ${ajaxObjectType}`);\n    }\n    return actualAjaxHandler;\n  }\n\n  /**\n   * Overrides for DatasourceBase\n   */\n\n  /**\n   * @inheritdoc\n   * @override\n   * @type {Number}\n   */\n  get total() {\n    return this._total;\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   * @type {?Array}\n   */\n  get data() {\n    return this._data;\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  async _update() {\n    const ajaxHandler = this._buildAjaxHandler();\n    const requestStartArgs = {\n      sender: this,\n      prevented: false,\n      preventDefault() {\n        requestStartArgs.prevented = true;\n      },\n      ajaxHandler,\n    };\n    this.emit('requeststart', requestStartArgs);\n    if (requestStartArgs.prevented) {\n      return null;\n    }\n    const response = await requestStartArgs.ajaxHandler.call(this);\n    this.emit('requestend', {\n      sender: this,\n      response,\n    });\n    // If not provided an object, use the default mapper\n    const mapper = this.ajax.mapper || AjaxDatasource.prototype.defaults.ajax.mapper;\n    const mappedObject = mapper.call(this, response);\n    this._data = mappedObject.data;\n    this._total = mappedObject.total;\n    return response;\n  }\n}\n\nAjaxDatasource.prototype.defaults = {\n  queryBuilder: {},\n  // ajax can be an object, function, or even a simple string\n  ajax: { // Axios options object\n    // Maps the response to return the data in an expected format\n    mapper(response) {\n      return {\n        data: response.data,\n        total: response.total,\n      };\n    },\n  },\n};\n\nexport default AjaxDatasource;\n",
    "static": true,
    "longname": "D:/Git Repositories/Packages/mitch-datasource/projects/mitch-datasource/src/js/AjaxDatasource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "AjaxDatasource",
    "memberof": "js/AjaxDatasource.js",
    "static": true,
    "longname": "js/AjaxDatasource.js~AjaxDatasource",
    "access": "public",
    "export": true,
    "importPath": "mitch-datasource-documentation/js/AjaxDatasource.js",
    "importStyle": "AjaxDatasource",
    "description": "Datasource to retrieve and manage\ndata from a remote endpoint.",
    "examples": [
      "<caption>Basic Usage</caption>\n\nimport { AjaxDatasource } from 'mitch-datasource';\n\nasync function exampleAsyncFunction() {\n  let datasource = new AjaxDatasource({\n    ajax: 'https://path/to/remote/endpoint'\n  });\n  await datasource.update();\n  console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\n}\nexampleAsyncFunction();",
      "<caption>Basic Usage with Options Object</caption>\n\nimport { AjaxDatasource } from 'mitch-datasource';\n\nasync function exampleAsyncFunction() {\n  let datasource = new AjaxDatasource({\n    ajax: {\n      // Note pagination/sorting/filtering doesn't\n      // work with this fake endpoint, as even when\n      // we send the datasource parameters, the\n      // remote endpoint won't actually vary\n      // the returned dataset.\n      url: 'https://jsonplaceholder.typicode.com/posts',\n      method: 'get',\n      // ... Other Axios options\n      // `mapper` is a custom option unique to the datasource package,\n      // it's not actually part of Axios\n      mapper: function(response) {\n        return {\n          data: response.data,\n          total: response.data.length,\n        }\n      }\n    }\n  });\n  await datasource.update();\n  console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\n}\nexampleAsyncFunction();",
      "<caption>Basic Usage with Function</caption>\n\nimport { AjaxDatasource } from 'mitch-datasource';\n\nasync function exampleAsyncFunction() {\n  let datasource = new AjaxDatasource({\n    ajax: async function(queryBuilder) {\n      return await mockAjaxCall(queryBuilder);\n    }\n  });\n  await datasource.update();\n  console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\n}\nexampleAsyncFunction();"
    ],
    "lineNumber": 67,
    "interface": false,
    "extends": [
      "js/DatasourceBase.js~DatasourceBase"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#constructor",
    "access": "public",
    "description": "The constructor, taking in an options object.\nFor more passable options, see\n{@link DatasourceBase#constructor}",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Function",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.ajax",
        "description": "Defines the behavior of the AJAX call.\nIf a string, remote endpoint to contact.\nIf a function, it'll call the function\nwhen data is requested. If an object,\nwill use the object to configure\nthe AJAX call."
      }
    ],
    "override": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_total",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#_total",
    "access": "private",
    "description": "The total amount of data items to page through.",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_data",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#_data",
    "access": "private",
    "description": "The array of data items.",
    "lineNumber": 112,
    "type": {
      "nullable": true,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "queryBuilder",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#queryBuilder",
    "access": "public",
    "description": "The query builder which constructs\neither the query object to pass to\npost/delete/put requests, or the\nquery string to pass to get\nrequests.",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "QueryBuilder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "ajax",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#ajax",
    "access": "public",
    "description": "Property defining the behavior\nof the AJAX call.\nIf a string, remote endpoint\nto contact. If a function,\nit'll call the function when\ndata is requested. If an object,\nwill use the object to configure\nthe AJAX call.",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "String",
        "Function",
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "_ajaxCall",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#_ajaxCall",
    "access": "private",
    "description": "Performs an AJAX call.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "axiosOptions",
        "description": "Ajax options object for axios"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "axiosOptions.url",
        "description": "Url to remote endpoint to ajax for."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "axiosOptions.method",
        "description": "The AJAX method, i.e. 'get', 'post', etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns the axios promise object, containing\n                  the response from remote endpoint."
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "_buildAjaxHandler",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#_buildAjaxHandler",
    "access": "private",
    "description": "Builds an AJAX handler function.",
    "lineNumber": 175,
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "A callback function which performs\n                   the actual ajax operation."
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "get",
    "name": "total",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#total",
    "access": "public",
    "description": "",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "override": true
  },
  {
    "__docId__": 59,
    "kind": "get",
    "name": "data",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#data",
    "access": "public",
    "description": "",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": true,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "override": true
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "_update",
    "memberof": "js/AjaxDatasource.js~AjaxDatasource",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/AjaxDatasource.js~AjaxDatasource#_update",
    "access": "private",
    "description": "",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "override": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "js/ArrayDatasource.js",
    "content": "import DatasourceBase from './DatasourceBase';\n\n/**\n * Datasource to manage an array of data.\n *\n * @example <caption>Basic Usage</caption>\n *\n * import { ArrayDatasource } from 'mitch-datasource';\n *\n * async function exampleAsyncFunction() {\n *   let datasource = new ArrayDatasource({\n *     data: [\n *       {\n *         id: 1,\n *         firstName: 'John',\n *         lastName: 'Smith'\n *       },\n *       {\n *         id: 2,\n *         firstName: 'Mary',\n *         lastName: 'Jane'\n *       },\n *       // ... More\n *     ]\n *   });\n *   await datasource.update();\n *   console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\n * }\n * exampleAsyncFunction();\n *\n * @example <caption>Sorting</caption>\n *\n * import { ArrayDatasource } from 'mitch-datasource';\n *\n * async function exampleAsyncFunction() {\n *   let datasource = new ArrayDatasource({\n *     data: [\n *       {\n *         id: 1,\n *         firstName: 'John',\n *         lastName: 'Smith'\n *       },\n *       {\n *         id: 2,\n *         firstName: 'Mary',\n *         lastName: 'Jane'\n *       },\n *       // ... More\n *     ],\n *     sort: (data, sortArguments = { 'firstName': 'asc' }) => {\n *       return mockSortLogic(data, sortArguments);\n *     }\n *   });\n *   await datasource.sort({ 'lastName': 'asc' });\n *   console.log(`First page of sorted data: ${JSON.stringify(datasource.data)}`);\n * }\n * exampleAsyncFunction();\n *\n * @example <caption>Filtering</caption>\n *\n * import { ArrayDatasource } from 'mitch-datasource';\n *\n * async function exampleAsyncFunction() {\n *   let datasource = new ArrayDatasource({\n *     data: [\n *       {\n *         id: 1,\n *         firstName: 'John',\n *         lastName: 'Smith'\n *       },\n *       {\n *         id: 2,\n *         firstName: 'Mary',\n *         lastName: 'Jane'\n *       },\n *       // ... More\n *     ],\n *     search: (data, searchText) => {\n *       return mockSearchLogic(data, searchText);\n *     }\n *   });\n *   await datasource.search('John Smith');\n *   console.log(`First page of filtered data: ${JSON.stringify(datasource.data)}`);\n * }\n * exampleAsyncFunction();\n */\nclass ArrayDatasource extends DatasourceBase {\n  /**\n   * ToDo: Callback function\n   *\n   * @typedef {Function} SortCallback\n   * @param {DatasourceBase} datasource\n   * The datasource to convert to a query object.\n   * @returns {Object} The query object.\n   */\n\n  /**\n   * ToDo: Callback function\n   *\n   * @typedef {Function} SortCallback\n   * @param {DatasourceBase} datasource\n   * The datasource to convert to a query object.\n   * @returns {Object} The query object.\n   */\n\n  /**\n   * The constructor, taking in an options object.\n   * For more passable options, see\n   * {@link DatasourceBase#constructor}\n   * @override\n   * @param {Array} options.data\n   * The data array of items.\n   * @param {Function} [options.search]\n   * The search function callback, which\n   * gets called when searching is requested.\n   * @param {Function} [options.sort]\n   * The sort function callback, which\n   * gets called when sorting is requested.\n   */\n  constructor(options = {}) {\n    const mergedOptions = {\n      ...ArrayDatasource.prototype.defaults,\n      ...options,\n    };\n    super(mergedOptions);\n    /**\n     * The raw, unfiltered, unsorted,\n     * unpaginated set of data.\n     *\n     * @access private\n     * @type {?Array}\n     */\n    this._rawData = mergedOptions.data;\n\n    /**\n     * The filtered, sorted set of data.\n     * This is not paginated.\n     * Extracted from the raw data\n     * ({@link ArrayDatasource#_rawData})\n     *\n     * @access private\n     * @type {?Array}\n     */\n    this._processedData = null;\n\n    /**\n     * The filtered, sorted, paginated set\n     * of data. Extracted from the processed data\n     * ({@link ArrayDatasource#_processedData})\n     *\n     * @access private\n     * @type {?Array}\n     */\n    this._data = null;\n\n    /**\n     * The search callback, called\n     * when search operations was\n     * requested.\n     *\n     * @access private\n     * @type {Function}\n     */\n    this._search = mergedOptions.search;\n\n    /**\n     * The sort callback, called\n     * when sort operations was\n     * requested.\n     *\n     * @access private\n     * @type {Function}\n     */\n    this._sort = mergedOptions.sort;\n  }\n\n  /**\n   * Extracts the processed set of data\n   * (i.e sorted, filtered) from the\n   * raw data provided.\n   * @access private\n   * @return {Array} The array of processed data items.\n   */\n  _getProcessedData() {\n    if (!this._rawData) {\n      return [];\n    }\n    let processedData = [...this._rawData];\n    if (this.searchArguments) {\n      processedData = this._search.call(this, processedData, this.searchArguments);\n    }\n    if (this._sort && this.sortArguments) {\n      processedData = this._sort.call(this, processedData, this.sortArguments);\n    }\n    return processedData;\n  }\n\n  /**\n   * Overrides for DatasourceBase\n   */\n\n  /**\n   * @inheritdoc\n   * @override\n   * @type {Number}\n   */\n  get total() {\n    if (this._processedData) {\n      return this._processedData.length;\n    }\n    if (this._rawData) {\n      return this._rawData.length;\n    }\n    return 0;\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   * @type {?Array}\n   */\n  get data() {\n    return this._data;\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  async _update() {\n    if (!this._rawData) {\n      return null;\n    }\n    this._processedData = this._getProcessedData();\n    this._data = this._processedData.slice(this.offset, this.offset + this.size);\n    return this._data;\n  }\n}\n\nArrayDatasource.prototype.defaults = {\n  data: null,\n  /* eslint-disable no-unused-vars */\n  search(data, searchArguments) {\n    return data;\n  },\n  sort(data, sortArguments) {\n    return data;\n  },\n  /* eslint-enable no-unused-vars */\n};\n\nexport default ArrayDatasource;\n",
    "static": true,
    "longname": "D:/Git Repositories/Packages/mitch-datasource/projects/mitch-datasource/src/js/ArrayDatasource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "ArrayDatasource",
    "memberof": "js/ArrayDatasource.js",
    "static": true,
    "longname": "js/ArrayDatasource.js~ArrayDatasource",
    "access": "public",
    "export": true,
    "importPath": "mitch-datasource-documentation/js/ArrayDatasource.js",
    "importStyle": "ArrayDatasource",
    "description": "Datasource to manage an array of data.",
    "examples": [
      "<caption>Basic Usage</caption>\n\nimport { ArrayDatasource } from 'mitch-datasource';\n\nasync function exampleAsyncFunction() {\n  let datasource = new ArrayDatasource({\n    data: [\n      {\n        id: 1,\n        firstName: 'John',\n        lastName: 'Smith'\n      },\n      {\n        id: 2,\n        firstName: 'Mary',\n        lastName: 'Jane'\n      },\n      // ... More\n    ]\n  });\n  await datasource.update();\n  console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\n}\nexampleAsyncFunction();",
      "<caption>Sorting</caption>\n\nimport { ArrayDatasource } from 'mitch-datasource';\n\nasync function exampleAsyncFunction() {\n  let datasource = new ArrayDatasource({\n    data: [\n      {\n        id: 1,\n        firstName: 'John',\n        lastName: 'Smith'\n      },\n      {\n        id: 2,\n        firstName: 'Mary',\n        lastName: 'Jane'\n      },\n      // ... More\n    ],\n    sort: (data, sortArguments = { 'firstName': 'asc' }) => {\n      return mockSortLogic(data, sortArguments);\n    }\n  });\n  await datasource.sort({ 'lastName': 'asc' });\n  console.log(`First page of sorted data: ${JSON.stringify(datasource.data)}`);\n}\nexampleAsyncFunction();",
      "<caption>Filtering</caption>\n\nimport { ArrayDatasource } from 'mitch-datasource';\n\nasync function exampleAsyncFunction() {\n  let datasource = new ArrayDatasource({\n    data: [\n      {\n        id: 1,\n        firstName: 'John',\n        lastName: 'Smith'\n      },\n      {\n        id: 2,\n        firstName: 'Mary',\n        lastName: 'Jane'\n      },\n      // ... More\n    ],\n    search: (data, searchText) => {\n      return mockSearchLogic(data, searchText);\n    }\n  });\n  await datasource.search('John Smith');\n  console.log(`First page of filtered data: ${JSON.stringify(datasource.data)}`);\n}\nexampleAsyncFunction();"
    ],
    "lineNumber": 87,
    "interface": false,
    "extends": [
      "js/DatasourceBase.js~DatasourceBase"
    ]
  },
  {
    "__docId__": 65,
    "kind": "typedef",
    "name": "SortCallback",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "static": true,
    "longname": "js/ArrayDatasource.js~ArrayDatasource.SortCallback",
    "access": "public",
    "description": "ToDo: Callback function",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The query object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DatasourceBase"
        ],
        "spread": false,
        "optional": false,
        "name": "datasource",
        "description": "The datasource to convert to a query object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The query object."
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "SortCallback"
    }
  },
  {
    "__docId__": 66,
    "kind": "typedef",
    "name": "SortCallback",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "static": true,
    "longname": "js/ArrayDatasource.js~ArrayDatasource.SortCallback",
    "access": "public",
    "description": "ToDo: Callback function",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The query object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DatasourceBase"
        ],
        "spread": false,
        "optional": false,
        "name": "datasource",
        "description": "The datasource to convert to a query object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The query object."
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "SortCallback"
    }
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#constructor",
    "access": "public",
    "description": "The constructor, taking in an options object.\nFor more passable options, see\n{@link DatasourceBase#constructor}",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "options.data",
        "description": "The data array of items."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.search",
        "description": "The search function callback, which\ngets called when searching is requested."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.sort",
        "description": "The sort function callback, which\ngets called when sorting is requested."
      }
    ],
    "override": true
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_rawData",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#_rawData",
    "access": "private",
    "description": "The raw, unfiltered, unsorted,\nunpaginated set of data.",
    "lineNumber": 133,
    "type": {
      "nullable": true,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_processedData",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#_processedData",
    "access": "private",
    "description": "The filtered, sorted set of data.\nThis is not paginated.\nExtracted from the raw data\n({@link ArrayDatasource#_rawData})",
    "lineNumber": 144,
    "type": {
      "nullable": true,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "_data",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#_data",
    "access": "private",
    "description": "The filtered, sorted, paginated set\nof data. Extracted from the processed data\n({@link ArrayDatasource#_processedData})",
    "lineNumber": 154,
    "type": {
      "nullable": true,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "_search",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#_search",
    "access": "private",
    "description": "The search callback, called\nwhen search operations was\nrequested.",
    "lineNumber": 164,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_sort",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#_sort",
    "access": "private",
    "description": "The sort callback, called\nwhen sort operations was\nrequested.",
    "lineNumber": 174,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "_getProcessedData",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#_getProcessedData",
    "access": "private",
    "description": "Extracts the processed set of data\n(i.e sorted, filtered) from the\nraw data provided.",
    "lineNumber": 184,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The array of processed data items."
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 74,
    "kind": "get",
    "name": "total",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#total",
    "access": "public",
    "description": "",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "override": true
  },
  {
    "__docId__": 75,
    "kind": "get",
    "name": "data",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#data",
    "access": "public",
    "description": "",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": true,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "override": true
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_update",
    "memberof": "js/ArrayDatasource.js~ArrayDatasource",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/ArrayDatasource.js~ArrayDatasource#_update",
    "access": "private",
    "description": "",
    "lineNumber": 230,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "override": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "js/DatasourceBase.js",
    "content": "import EventEmitter from 'events';\n\n/**\n * An abstract class for derived datasource\n * classes to use to represent core collections\n * of data.\n *\n * It provides additional features such\n * as pagination, sorting, searching, etc.\n */\nclass DatasourceBase extends EventEmitter {\n  /**\n   * Create a datasource.\n   * @param {Object} [options]\n   * The datasource options.\n   * @param {Boolean} [options.loading=false]\n   * Represents whether the datasource is\n   * loading or not.\n   * @param {Number} [options.offset=0]\n   * The pagination offset. It skips the\n   * specified amount of items when querying.\n   * @param {Number} [options.page=1]\n   * The page number for data pagination.\n   * @param {Number} [options.size=10]\n   * The pagination size, i.e. the number\n   * of records per page.\n   * @param {*} [options.searchArguments=null]\n   * It can be anything. For example, it can be a\n   * simple text. Alternatively, it can be a more\n   * complex search arguments object for more\n   * advanced requirements such as multi-column filtering.\n   * If the datasource uses remote endpoints, it'll be\n   * sent to the remote endpoint as part of the searchArguments\n   * field. If it's an object, it'll get serialised to JSON.\n   * If the datasource is local data, the argument will\n   * just get passed to the configured search callback\n   * as-is as a parameter.\n   * @param {*} [options.sortArguments=null]\n   * It can be anything. For example, it can be a\n   * simple text. Alternatively, it can be a more\n   * complex sort arguments object for more\n   * advanced requirements such as multi-column sorting.\n   * If the datasource uses remote endpoints, it'll be\n   * sent to the remote endpoint as part of the sortArguments\n   * field. If it's an object, it'll get serialised to JSON.\n   * If the datasource is local data, the argument will\n   * just get passed to the configured sort callback\n   * as-is as a parameter.\n   */\n  constructor(options = {}) {\n    super();\n    const mergedOptions = {\n      ...DatasourceBase.prototype.defaults,\n      ...options,\n    };\n\n    /**\n     * Represents whether the datasource is\n     * loading or not.\n     *\n     * @access public\n     * @type {Boolean}\n     */\n    this.loading = mergedOptions.loading;\n\n    /**\n     * The pagination offset. It skips the\n     * specified amount of items when querying.\n     *\n     * @access public\n     * @type {Number}\n     */\n    this.offset = mergedOptions.offset;\n\n    /**\n     * The pagination size, i.e. the number\n     * of records per page.\n     *\n     * @access public\n     * @type {Number}\n     */\n    this.size = mergedOptions.size;\n\n    /**\n     * The search arguments object, for searching purposes.\n     *\n     * @access public\n     * @type {*}\n     */\n    this.searchArguments = mergedOptions.searchArguments;\n\n    /**\n     * The search arguments, for sorting purposes.\n     *\n     * @access public\n     * @type {*}\n     */\n    this.sortArguments = mergedOptions.sortArguments;\n\n    if (mergedOptions.page) {\n      /**\n       * The page number for data pagination.\n       *\n       * @access public\n       * @type {Number}\n       */\n      this.page = mergedOptions.page;\n    }\n  }\n\n  /**\n   * Overridables\n   */\n\n  /**\n   * Gets the current set of data the datasource\n   * has, based on pagination, sorting, and filtering.\n   * @abstract\n   * @access public\n   * @type {?Array}\n   */\n  get data() {\n    throw new Error(`Getter not supported for ${this.constructor.name}`);\n  }\n\n  /**\n   * Gets the total amount of data items available\n   * for the datasource to page through.\n   * @abstract\n   * @type {Number}\n   */\n  get total() {\n    throw new Error(`Getter not supported for ${this.constructor.name}`);\n  }\n\n  /**\n   * Updates the datasource, using the currently\n   * configured search text, sort settings, and\n   * pagination options.\n   * @abstract\n   * @access protected\n   * @return {Promise} A promise object, resolved when the update is completed.\n   */\n  _update() {\n    throw new Error(`Method not supported for ${this.constructor.name}`);\n  }\n\n  /**\n   * Getters & Setters\n   */\n\n  /**\n   * Gets the total amount of data items for the current page.\n   * @access public\n   * @type {?Array}\n   */\n  get pageTotal() {\n    if (this.offset === this.total) {\n      return 0;\n    }\n    const itemsRemaining = this.total - this.offset;\n    if (itemsRemaining <= this.size) {\n      return itemsRemaining;\n    }\n    return this.size;\n  }\n\n  /**\n   * Gets the current page the datasource is\n   * currently set to.\n   * @access public\n   * @type {Number}\n   */\n  get page() {\n    if (this.totalPages === 0) {\n      return 0;\n    }\n    return (this.offset + this.size) / this.size;\n  }\n\n  /**\n   * @param {Number} newPage - The new page to set to.\n   * @access public\n   * @type {Number}\n   */\n  set page(newPage) {\n    this.offset = newPage * this.size - this.size;\n  }\n\n  /**\n   * Boolean to indicate whether it's the first page or not.\n   * @access public\n   * @type {Boolean}\n   */\n  get isFirstPage() {\n    if (this.page <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Boolean to indicate whether it's the last page or not.\n   * @access public\n   * @type {Boolean}\n   */\n  get isLastPage() {\n    if (this.page >= this.totalPages) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * The total amount of pages.\n   * Returns null if total wasn't provided.\n   * A number representing current page otherwise.\n   * @access public\n   * @type {?Number}\n   */\n  get totalPages() {\n    if (this.total === null || !this.size) {\n      return null;\n    }\n    if (this.total === 0) {\n      return 0;\n    }\n    return Math.ceil(this.total / this.size);\n  }\n\n  /**\n   * Methods\n   */\n\n  /**\n   * Updates the datasource, using the currently\n   * configured search text, sort settings, and\n   * pagination options.\n   * @access public\n   * @return {Promise} A promise object, resolved when the update is completed.\n   */\n  async update() {\n    this.loading = true;\n    try {\n      const updateStartArgs = {\n        sender: this,\n        prevented: false,\n        preventDefault() {\n          updateStartArgs.prevented = true;\n        },\n      };\n      this.emit('updatestart', updateStartArgs);\n      if (updateStartArgs.prevented) {\n        return null;\n      }\n      const updatedResponse = await this._update();\n      this.loading = false;\n      this.emit('updateend', {\n        sender: this,\n        response: updatedResponse,\n      });\n      return updatedResponse;\n    } catch (ex) {\n      this.loading = false;\n      throw ex;\n    }\n  }\n\n  /**\n   * Traverse to the specified page, and update the datasource accordingly.\n   * @access public\n   * @param  {Number} pageNum - The new page to traverse to.\n   * @return {Promise} A promise with a boolean data. True if\n   *                   successfully traversed to specified page.\n   *                   False otherwise.\n   */\n  async goToPage(pageNum) {\n    if (pageNum > 0 && pageNum <= this.totalPages) {\n      this.page = pageNum;\n      await this.update();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Traverse to the next page, and update the datasource accordingly.\n   * @return {Promise} A promise with a boolean data. True if\n   *                   successfully traversed to next page.\n   *                   False otherwise.\n   */\n  async nextPage() {\n    return this.goToPage(this.page + 1);\n  }\n\n  /**\n   * Traverse to the previous page, and update the datasource accordingly.\n   * @access public\n   * @return {Promise} A promise with a boolean data. True if\n   *                   successfully traversed to previous page.\n   *                   False otherwise.\n   */\n  async prevPage() {\n    return this.goToPage(this.page - 1);\n  }\n\n  /**\n   * Given a search text, filters the data accordingly.\n   * @access public\n   * @param  {*} searchArguments - The search arguments for searching purposes.\n   * @return {Promise} A promise object, resolved when the search is completed.\n   */\n  async search(searchArguments) {\n    this.searchArguments = searchArguments;\n    this.offset = 0;\n    return this.update();\n  }\n\n  /**\n   * Sort the data based on a field and direction.\n   * @access public\n   * @param  {*} sortArguments - The sorting arguments, for sorting purposes.\n   * @return {Promise} A promise object, resolved when the sorting is completed.\n   */\n  async sort(sortArguments = null) {\n    this.sortArguments = sortArguments;\n    return this.update();\n  }\n}\n\nDatasourceBase.prototype.defaults = {\n  loading: false,\n  offset: 0,\n  size: 10,\n  searchArguments: null,\n  sortArguments: null,\n};\n\nexport default DatasourceBase;\n",
    "static": true,
    "longname": "D:/Git Repositories/Packages/mitch-datasource/projects/mitch-datasource/src/js/DatasourceBase.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "DatasourceBase",
    "memberof": "js/DatasourceBase.js",
    "static": true,
    "longname": "js/DatasourceBase.js~DatasourceBase",
    "access": "public",
    "export": true,
    "importPath": "mitch-datasource-documentation/js/DatasourceBase.js",
    "importStyle": "DatasourceBase",
    "description": "An abstract class for derived datasource\nclasses to use to represent core collections\nof data.\n\nIt provides additional features such\nas pagination, sorting, searching, etc.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#constructor",
    "access": "public",
    "description": "Create a datasource.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The datasource options."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.loading",
        "description": "Represents whether the datasource is\nloading or not."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "options.offset",
        "description": "The pagination offset. It skips the\nspecified amount of items when querying."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "options.page",
        "description": "The page number for data pagination."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "options.size",
        "description": "The pagination size, i.e. the number\nof records per page."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.searchArguments",
        "description": "It can be anything. For example, it can be a\nsimple text. Alternatively, it can be a more\ncomplex search arguments object for more\nadvanced requirements such as multi-column filtering.\nIf the datasource uses remote endpoints, it'll be\nsent to the remote endpoint as part of the searchArguments\nfield. If it's an object, it'll get serialised to JSON.\nIf the datasource is local data, the argument will\njust get passed to the configured search callback\nas-is as a parameter."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.sortArguments",
        "description": "It can be anything. For example, it can be a\nsimple text. Alternatively, it can be a more\ncomplex sort arguments object for more\nadvanced requirements such as multi-column sorting.\nIf the datasource uses remote endpoints, it'll be\nsent to the remote endpoint as part of the sortArguments\nfield. If it's an object, it'll get serialised to JSON.\nIf the datasource is local data, the argument will\njust get passed to the configured sort callback\nas-is as a parameter."
      }
    ]
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "loading",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#loading",
    "access": "public",
    "description": "Represents whether the datasource is\nloading or not.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "offset",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#offset",
    "access": "public",
    "description": "The pagination offset. It skips the\nspecified amount of items when querying.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "size",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#size",
    "access": "public",
    "description": "The pagination size, i.e. the number\nof records per page.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "searchArguments",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#searchArguments",
    "access": "public",
    "description": "The search arguments object, for searching purposes.",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "sortArguments",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#sortArguments",
    "access": "public",
    "description": "The search arguments, for sorting purposes.",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "get",
    "name": "data",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#data",
    "access": "public",
    "description": "Gets the current set of data the datasource\nhas, based on pagination, sorting, and filtering.",
    "lineNumber": 122,
    "type": {
      "nullable": true,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 89,
    "kind": "get",
    "name": "total",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#total",
    "access": "public",
    "description": "Gets the total amount of data items available\nfor the datasource to page through.",
    "lineNumber": 132,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "_update",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#_update",
    "access": "protected",
    "description": "Updates the datasource, using the currently\nconfigured search text, sort settings, and\npagination options.",
    "lineNumber": 144,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise object, resolved when the update is completed."
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "get",
    "name": "pageTotal",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#pageTotal",
    "access": "public",
    "description": "Gets the total amount of data items for the current page.",
    "lineNumber": 157,
    "type": {
      "nullable": true,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "get",
    "name": "page",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#page",
    "access": "public",
    "description": "Gets the current page the datasource is\ncurrently set to.",
    "lineNumber": 174,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "set",
    "name": "page",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#page",
    "access": "public",
    "description": "",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPage",
        "description": "The new page to set to."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "get",
    "name": "isFirstPage",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#isFirstPage",
    "access": "public",
    "description": "Boolean to indicate whether it's the first page or not.",
    "lineNumber": 195,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "get",
    "name": "isLastPage",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#isLastPage",
    "access": "public",
    "description": "Boolean to indicate whether it's the last page or not.",
    "lineNumber": 207,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "totalPages",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#totalPages",
    "access": "public",
    "description": "The total amount of pages.\nReturns null if total wasn't provided.\nA number representing current page otherwise.",
    "lineNumber": 221,
    "type": {
      "nullable": true,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "update",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#update",
    "access": "public",
    "description": "Updates the datasource, using the currently\nconfigured search text, sort settings, and\npagination options.",
    "lineNumber": 242,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise object, resolved when the update is completed."
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "goToPage",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#goToPage",
    "access": "public",
    "description": "Traverse to the specified page, and update the datasource accordingly.",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "pageNum",
        "description": "The new page to traverse to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise with a boolean data. True if\n                  successfully traversed to specified page.\n                  False otherwise."
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "nextPage",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#nextPage",
    "access": "public",
    "description": "Traverse to the next page, and update the datasource accordingly.",
    "lineNumber": 292,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise with a boolean data. True if\n                  successfully traversed to next page.\n                  False otherwise."
    },
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "prevPage",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#prevPage",
    "access": "public",
    "description": "Traverse to the previous page, and update the datasource accordingly.",
    "lineNumber": 303,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise with a boolean data. True if\n                  successfully traversed to previous page.\n                  False otherwise."
    },
    "params": []
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "search",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#search",
    "access": "public",
    "description": "Given a search text, filters the data accordingly.",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "searchArguments",
        "description": "The search arguments for searching purposes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise object, resolved when the search is completed."
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "sort",
    "memberof": "js/DatasourceBase.js~DatasourceBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/DatasourceBase.js~DatasourceBase#sort",
    "access": "public",
    "description": "Sort the data based on a field and direction.",
    "lineNumber": 325,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sortArguments",
        "description": "The sorting arguments, for sorting purposes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise object, resolved when the sorting is completed."
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "js/QueryBuilder.js",
    "content": "import queryString from 'query-string';\n\nfunction hasObjectInArray(arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (typeof arr[i] === 'object') {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Using a datasource object, it builds\n * the data object for AJAX post requests,\n * or the query string for AJAX get requests\n *\n * @example <caption>With AJAX Datasource</caption>\n *\n * import { AjaxDatasource, QueryBuilder } from 'mitch-datasource';\n *\n * let datasource = new AjaxDatasource({\n *   // ...\n *   queryBuilder: new QueryBuilder({\n *     // ...\n *   })\n * });\n *\n * @example <caption>With Adding to Defaults</caption>\n *\n * import { AjaxDatasource, QueryBuilder } from 'mitch-datasource';\n *\n * let datasource = new AjaxDatasource({\n *   // ...\n *   queryBuilder: new QueryBuilder({\n *     // ...\n *     serialiseToQueryObject(datasource) {\n *       // Calls the original default serialiser\n *       let queryObject = QueryBuilder.prototype\n *                         .defaults.serialiseToQueryObject(datasource);\n *       // ... Do your additional operations\n *       return queryObject;\n *     },\n *     serialiseToQueryString(objectToSerialise) {\n *       // Calls the original default serialiser\n *       let queryString = QueryBuilder.prototype\n *                         .defaults.serialiseToQueryString(objectToSerialise);\n *       // ... Do your additional operations\n *       return queryString;\n *     },\n *     queryStringOptions: {\n *       // Keep the default options\n *       ...QueryBuilder.prototype.defaults.queryStringOptions,\n *       // ... Put additional options here. It'll override default options\n *       // For available options, check the docs for QueryBuilder constructor\n *     }\n *   })\n * });\n *\n * @example <caption>With Extra Parameter for GET/POST Request</caption>\n *\n * import { AjaxDatasource, QueryBuilder } from 'mitch-datasource';\n *\n * let datasource = new AjaxDatasource({\n *   // ...\n *   queryBuilder: new QueryBuilder({\n *     serialiseToQueryObject(datasource) {\n *       // Calls the original converter\n *       let queryObject = QueryBuilder.prototype.defaults.serialiseToQueryObject(datasource);\n *       queryObject['extraGreetingData'] = 'HelloWorld';\n *       return queryObject;\n *     },\n *   })\n * });\n */\nclass QueryBuilder {\n  /**\n   * Callback function that converts a datasource\n   * into a query object (which in turn can be\n   * converted to query string).\n   *\n   * @typedef {Function} SerialiseToQueryObjectCallback\n   * @param {DatasourceBase} datasource\n   * The datasource to convert to a query object.\n   * @returns {Object} The query object.\n   */\n\n  /**\n   * Callback function which serialises the\n   * query string object to the query string.\n   * By default, it uses the `query-string` package\n   * to convert the query string object to query\n   * string.\n   *\n   * @typedef {Function} SerialiseToQueryStringCallback\n   * @param {Object} objectToSerialise\n   * The object to serialise to query string.\n   * By default, it's the query object.\n   * @returns {String} The query string.\n   */\n\n  /**\n   * The query string options object that\n   * contains configuration and settings\n   * to affect the process of converting\n   * the datasource to a query string.\n   *\n   * For a full list of available options\n   * and settings, see {@link https://www.npmjs.com/package/query-string#stringifyobject-options}\n   *\n   * @typedef {Object} QueryStringOptions\n   */\n\n  /**\n   * @param {Object} [options] The options object.\n   * @param {SerialiseToQueryObjectCallback} [options.serialiseToQueryObject]\n   * Function which converts a datasource\n   * into a query object (which in turn can\n   * be converted to query string).\n   * @param {QueryStringOptions} [options.queryStringOptions]\n   * See {@link QueryStringOptions}\n   * @param {SerialiseToQueryStringCallback} [options.serialiseToQueryString]\n   * The function which serialises the\n   * query string object to the query string.\n   */\n  constructor(options = {}) {\n    const mergedOptions = {\n      ...QueryBuilder.prototype.defaults,\n      ...options,\n    };\n    /**\n     * See {@link SerialiseToQueryObjectCallback}\n     *\n     * @access public\n     * @type {SerialiseToQueryObjectCallback}\n     */\n    this.serialiseToQueryObject = mergedOptions.serialiseToQueryObject;\n\n    /**\n     * See {@link QueryStringOptions}\n     *\n     * @access public\n     * @type {QueryStringOptions}\n     */\n    this.queryStringOptions = mergedOptions.queryStringOptions;\n\n    /**\n     * If you need to change the behavior of the\n     * query string, then you should first check\n     * {@link QueryBuilder#queryStringOptions}\n     *\n     * For more information, see {@link SerialiseToQueryStringCallback}\n     *\n     * @access public\n     * @type {SerialiseToQueryStringCallback}\n     */\n    this.serialiseToQueryString = mergedOptions.serialiseToQueryString;\n  }\n\n  /**\n   * Serialises a datasource into\n   * an object and returns that object.\n   * That object is passed as data as\n   * part of AJAX post requests.\n   *\n   * @param {DatasourceBase} datasource The datasource.\n   * @access public\n   * @returns {Object} The query object.\n   */\n  getQueryObject(datasource) {\n    if (!this.serialiseToQueryObject) {\n      throw new Error('serialiseToQueryObject must be specified and cannot be undefined or null.');\n    }\n    return this.serialiseToQueryObject.call(this, datasource);\n  }\n\n  /**\n   * Serialises a datasource into\n   * a query string and returns that string.\n   * This string is passed as data as\n   * part of AJAX get requests.\n   *\n   * @param {DatasourceBase} datasource The datasource.\n   * @access public\n   * @returns {String} The query string.\n   */\n  getQueryString(datasource) {\n    const objectToSerialise = { ...this.getQueryObject(datasource) };\n    if (this.serialiseToQueryString) {\n      return this.serialiseToQueryString.call(this, objectToSerialise);\n    }\n    throw new Error('Query string serialiser is specified as null or undefined in the options.');\n  }\n}\n\nQueryBuilder.prototype.defaults = {\n  // Properties to include in the\n  // serialisation to GET query string,\n  // or when constructing the\n  // data object.\n  // By default, it only include\n  // primitive properties, ignoring\n  // objects, arrays and certain properties.\n  serialiseToQueryObject(datasource) {\n    const entries = Object.entries(datasource);\n    const filteredEntries = entries.filter((entry) => {\n      const key = entry[0];\n      if (key.indexOf('_') === 0 || key === 'loading') { // Ignore 'private' properties and specified properties\n        return false;\n      }\n      // Ignore properties that shouldn't be serialised,\n      // i.e. properties that configures the serialisation\n      // itself.\n      const value = entry[1];\n      if (value === null) { // Don't serialise null values\n        return false;\n      }\n      if (key === 'queryBuilder' || key === 'ajax') {\n        return false;\n      }\n      return true;\n    });\n    const queryObject = {\n      // Computed getters doesn't get included in ES6 spread syntax,\n      // so we manually include the necessary one below.\n      page: datasource.page,\n    };\n    filteredEntries.forEach((entry) => {\n      const key = entry[0];\n      const value = entry[1];\n      queryObject[key] = value;\n    });\n    return queryObject;\n  },\n  /* eslint-disable no-param-reassign */\n  serialiseToQueryString(objectToSerialise) {\n    Object.keys(objectToSerialise).forEach((prop) => {\n      if (Array.isArray(objectToSerialise[prop]) && hasObjectInArray(objectToSerialise[prop])) {\n        for (let i = 0; i < objectToSerialise[prop].length; i += 1) {\n          objectToSerialise[prop][i] = JSON.stringify(objectToSerialise[prop][i]);\n        }\n      } else if (typeof objectToSerialise[prop] === 'object') {\n        objectToSerialise[prop] = JSON.stringify(objectToSerialise[prop]);\n      }\n    });\n    return queryString.stringify(objectToSerialise, this.queryStringOptions);\n  },\n  /* eslint-enable no-param-reassign */\n  queryStringOptions: {\n    // By default, uses NPM query\n    // string package to serialise\n    // to query string. For full list\n    // of options, see:\n    //   https://www.npmjs.com/package/query-string#stringifyobject-options\n    // If you specified a query string serialiser,\n    // this options can optionally be used.\n    arrayFormat: 'bracket',\n  },\n};\n\nexport default QueryBuilder;\n",
    "static": true,
    "longname": "D:/Git Repositories/Packages/mitch-datasource/projects/mitch-datasource/src/js/QueryBuilder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "hasObjectInArray",
    "memberof": "js/QueryBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/QueryBuilder.js~hasObjectInArray",
    "access": "public",
    "export": false,
    "importPath": "mitch-datasource-documentation/js/QueryBuilder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "class",
    "name": "QueryBuilder",
    "memberof": "js/QueryBuilder.js",
    "static": true,
    "longname": "js/QueryBuilder.js~QueryBuilder",
    "access": "public",
    "export": true,
    "importPath": "mitch-datasource-documentation/js/QueryBuilder.js",
    "importStyle": "QueryBuilder",
    "description": "Using a datasource object, it builds\nthe data object for AJAX post requests,\nor the query string for AJAX get requests",
    "examples": [
      "<caption>With AJAX Datasource</caption>\n\nimport { AjaxDatasource, QueryBuilder } from 'mitch-datasource';\n\nlet datasource = new AjaxDatasource({\n  // ...\n  queryBuilder: new QueryBuilder({\n    // ...\n  })\n});",
      "<caption>With Adding to Defaults</caption>\n\nimport { AjaxDatasource, QueryBuilder } from 'mitch-datasource';\n\nlet datasource = new AjaxDatasource({\n  // ...\n  queryBuilder: new QueryBuilder({\n    // ...\n    serialiseToQueryObject(datasource) {\n      // Calls the original default serialiser\n      let queryObject = QueryBuilder.prototype\n                        .defaults.serialiseToQueryObject(datasource);\n      // ... Do your additional operations\n      return queryObject;\n    },\n    serialiseToQueryString(objectToSerialise) {\n      // Calls the original default serialiser\n      let queryString = QueryBuilder.prototype\n                        .defaults.serialiseToQueryString(objectToSerialise);\n      // ... Do your additional operations\n      return queryString;\n    },\n    queryStringOptions: {\n      // Keep the default options\n      ...QueryBuilder.prototype.defaults.queryStringOptions,\n      // ... Put additional options here. It'll override default options\n      // For available options, check the docs for QueryBuilder constructor\n    }\n  })\n});",
      "<caption>With Extra Parameter for GET/POST Request</caption>\n\nimport { AjaxDatasource, QueryBuilder } from 'mitch-datasource';\n\nlet datasource = new AjaxDatasource({\n  // ...\n  queryBuilder: new QueryBuilder({\n    serialiseToQueryObject(datasource) {\n      // Calls the original converter\n      let queryObject = QueryBuilder.prototype.defaults.serialiseToQueryObject(datasource);\n      queryObject['extraGreetingData'] = 'HelloWorld';\n      return queryObject;\n    },\n  })\n});"
    ],
    "lineNumber": 75,
    "interface": false
  },
  {
    "__docId__": 114,
    "kind": "typedef",
    "name": "SerialiseToQueryObjectCallback",
    "memberof": "js/QueryBuilder.js~QueryBuilder",
    "static": true,
    "longname": "js/QueryBuilder.js~QueryBuilder.SerialiseToQueryObjectCallback",
    "access": "public",
    "description": "Callback function that converts a datasource\ninto a query object (which in turn can be\nconverted to query string).",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The query object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DatasourceBase"
        ],
        "spread": false,
        "optional": false,
        "name": "datasource",
        "description": "The datasource to convert to a query object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The query object."
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "SerialiseToQueryObjectCallback"
    }
  },
  {
    "__docId__": 115,
    "kind": "typedef",
    "name": "SerialiseToQueryStringCallback",
    "memberof": "js/QueryBuilder.js~QueryBuilder",
    "static": true,
    "longname": "js/QueryBuilder.js~QueryBuilder.SerialiseToQueryStringCallback",
    "access": "public",
    "description": "Callback function which serialises the\nquery string object to the query string.\nBy default, it uses the `query-string` package\nto convert the query string object to query\nstring.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} The query string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "objectToSerialise",
        "description": "The object to serialise to query string.\nBy default, it's the query object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The query string."
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "SerialiseToQueryStringCallback"
    }
  },
  {
    "__docId__": 116,
    "kind": "typedef",
    "name": "QueryStringOptions",
    "memberof": "js/QueryBuilder.js~QueryBuilder",
    "static": true,
    "longname": "js/QueryBuilder.js~QueryBuilder.QueryStringOptions",
    "access": "public",
    "description": "The query string options object that\ncontains configuration and settings\nto affect the process of converting\nthe datasource to a query string.\n\nFor a full list of available options\nand settings, see {@link https://www.npmjs.com/package/query-string#stringifyobject-options}",
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "QueryStringOptions"
    }
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/QueryBuilder.js~QueryBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/QueryBuilder.js~QueryBuilder#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "SerialiseToQueryObjectCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "options.serialiseToQueryObject",
        "description": "Function which converts a datasource\ninto a query object (which in turn can\nbe converted to query string)."
      },
      {
        "nullable": null,
        "types": [
          "QueryStringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options.queryStringOptions",
        "description": "See {@link QueryStringOptions}"
      },
      {
        "nullable": null,
        "types": [
          "SerialiseToQueryStringCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "options.serialiseToQueryString",
        "description": "The function which serialises the\nquery string object to the query string."
      }
    ]
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "serialiseToQueryObject",
    "memberof": "js/QueryBuilder.js~QueryBuilder",
    "static": false,
    "longname": "js/QueryBuilder.js~QueryBuilder#serialiseToQueryObject",
    "access": "public",
    "description": "See {@link SerialiseToQueryObjectCallback}",
    "lineNumber": 136,
    "type": {
      "nullable": null,
      "types": [
        "SerialiseToQueryObjectCallback"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "queryStringOptions",
    "memberof": "js/QueryBuilder.js~QueryBuilder",
    "static": false,
    "longname": "js/QueryBuilder.js~QueryBuilder#queryStringOptions",
    "access": "public",
    "description": "See {@link QueryStringOptions}",
    "lineNumber": 144,
    "type": {
      "nullable": null,
      "types": [
        "QueryStringOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "serialiseToQueryString",
    "memberof": "js/QueryBuilder.js~QueryBuilder",
    "static": false,
    "longname": "js/QueryBuilder.js~QueryBuilder#serialiseToQueryString",
    "access": "public",
    "description": "If you need to change the behavior of the\nquery string, then you should first check\n{@link QueryBuilder#queryStringOptions}\n\nFor more information, see {@link SerialiseToQueryStringCallback}",
    "lineNumber": 156,
    "type": {
      "nullable": null,
      "types": [
        "SerialiseToQueryStringCallback"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "getQueryObject",
    "memberof": "js/QueryBuilder.js~QueryBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/QueryBuilder.js~QueryBuilder#getQueryObject",
    "access": "public",
    "description": "Serialises a datasource into\nan object and returns that object.\nThat object is passed as data as\npart of AJAX post requests.",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The query object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DatasourceBase"
        ],
        "spread": false,
        "optional": false,
        "name": "datasource",
        "description": "The datasource."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The query object."
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "getQueryString",
    "memberof": "js/QueryBuilder.js~QueryBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/QueryBuilder.js~QueryBuilder#getQueryString",
    "access": "public",
    "description": "Serialises a datasource into\na query string and returns that string.\nThis string is passed as data as\npart of AJAX get requests.",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} The query string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DatasourceBase"
        ],
        "spread": false,
        "optional": false,
        "name": "datasource",
        "description": "The datasource."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The query string."
    }
  },
  {
    "kind": "index",
    "content": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![made-with-esdocs](https://img.shields.io/badge/Made%20with-ESDocs-green.svg)](https://esdoc.org/)\n[![CircleCI](https://circleci.com/gh/deltoss/mitch-datasource.svg?style=svg)](https://circleci.com/gh/deltoss/mitch-datasource)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n# Introduction\n\nModern applications are usually data-oriented, and it can have many ways to present data. There can be many different components, plugins, and so on. Between all of these, the approach to perform data operations is mostly the same. Why would you want to write the same pagination/search/sorting logic per component?\n\nThat's where this package shines. `mitch-datasource` was developed to resolve the issue by having a core entity which manage those data operations whilst being flexible to cater to different requirements. It's framework-agnostic, so you can feed it into plugins, components, or whatever.\n\n# Features\n\n- Client-Side Framework Agnostic\n- Highly Customisable & Extensible\n- Works and tested with React & Vue (See `mitch-datasource-test-vue` & `mitch-datasourve-test-react` projects)\n- Pagination\n- Sorting (Single & Multi Column Support)\n- Search (Single & Multi Column Support)\n- Datasources for:\n  - AJAX\n  - Array\n- Events\n\n# Requested/Future Improvements\n\n- Support Hierarchical Datasets\n- CRUD operations\n- Grouping Data\n\n# License\n\nMIT © Michael Tran",
    "longname": "D:\\Git Repositories\\Packages\\mitch-datasource\\projects\\mitch-datasource-documentation\\manual\\index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"mitch-datasource-documentation\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Documentation for mitch-datasource\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"npm-run-all \\\"build-mermaid\\\" \\\"build-esdoc\\\"\",\n    \"watch\": \"nodemon --watch ./scripts --watch ../mitch-datasource/src/js --watch ./manual --ext js,mmd,md --exec \\\"npm run build\\\"\",\n    \"build-mermaid\": \"node -r esm ./scripts/build-mermaid.js -- ./manual/asset\",\n    \"watch-mermaid\": \"nodemon --watch ./manual/asset --ext mmd --exec \\\"npm run build-mermaid\\\"\",\n    \"build-esdoc\": \"esdoc -c esdoc.json\",\n    \"watch-esdoc\": \"nodemon --watch ../mitch-datasource/src/js --watch ./manual --ext * --exec \\\"npm run build-esdoc\\\"\"\n  },\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-publish-markdown-plugin\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esm\": \"^3.2.25\",\n    \"glob\": \"^7.1.6\",\n    \"mermaid.cli\": \"^0.5.1\",\n    \"nodemon\": \"^1.19.4\",\n    \"npm-run-all\": \"^4.1.5\"\n  }\n}\n",
    "longname": "D:\\Git Repositories\\Packages\\mitch-datasource\\projects\\mitch-datasource-documentation\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![made-with-esdocs](https://img.shields.io/badge/Made%20with-ESDocs-green.svg)](https://esdoc.org/)\n[![CircleCI](https://circleci.com/gh/deltoss/mitch-datasource.svg?style=svg)](https://circleci.com/gh/deltoss/mitch-datasource)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n# Introduction\n\nModern applications are usually data-oriented, and it can have many ways to present data. There can be many different components, plugins, and so on. Between all of these, the approach to perform data operations is mostly the same. Why would you want to write the same pagination/search/sorting logic per component?\n\nThat's where this package shines. `mitch-datasource` was developed to resolve the issue by having a core entity which manage those data operations whilst being flexible to cater to different requirements. It's framework-agnostic, so you can feed it into plugins, components, or whatever.\n\n# Features\n\n- Client-Side Framework Agnostic\n- Highly Customisable & Extensible\n- Works and tested with React & Vue (See `mitch-datasource-test-vue` & `mitch-datasourve-test-react` projects)\n- Pagination\n- Sorting (Single & Multi Column Support)\n- Search (Single & Multi Column Support)\n- Datasources for:\n  - AJAX\n  - Array\n- Events\n\n# Requested/Future Improvements\n\n- Support Hierarchical Datasets\n- CRUD operations\n- Grouping Data\n\n# License\n\nMIT © Michael Tran",
    "longname": "D:\\Git Repositories\\Packages\\mitch-datasource\\projects\\mitch-datasource-documentation\\manual\\index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "D:\\Git Repositories\\Packages\\mitch-datasource\\projects\\mitch-datasource-documentation\\manual\\asset",
    "name": "./manual/asset/",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\Git Repositories\\Packages\\mitch-datasource\\projects\\mitch-datasource-documentation\\manual\\installation.md",
    "name": "./manual/installation.md",
    "content": "# Installation\r\n\r\n## Local Files\r\n\r\n1. Clone or download this git repository, and move the contents of the `projects/mitch-datasource/dest` folder to your project. For example, you can put it in `/scripts/mitch-datasource` inside your project.\r\n\r\n2. Import the `mitch-datasource` files as below, changing the path depending on where you copied it into for your project\r\n   ```html\r\n   <script src=\"/scripts/mitch-datasource/js/index.min.js\"></script>\r\n   ```\r\n\r\n## With NPM\r\n\r\n`mitch-datasource` is available on npm. You can perform the following steps to get it set up.\r\n\r\n1. Open up your terminal, and run the below command from your project directory:\r\n   ```bash\r\n   npm install mitch-datasource --save\r\n   ```\r\n\r\n2. You can use CommonJS, AMD, or ES6 to import the plugin. For example:\r\n\r\n   ```JavaScript\r\n   import mitchDatasource from 'mitch-datasource';\r\n   ```\r\n\r\n   Or:\r\n\r\n   ```JavaScript\r\n   import mitchDatasource from 'mitch-datasource';\r\n   ```\r\n\r\n   Or:\r\n\r\n   ```JavaScript\r\n   import { ArrayDatasource, AjaxDatasource, DatasourceBase, QueryBuilder } from 'mitch-datasource';\r\n   ```\r\n\r\nSee the [Usage](./usage.html) section of the documentation on how to use this package.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\Git Repositories\\Packages\\mitch-datasource\\projects\\mitch-datasource-documentation\\manual\\usage.md",
    "name": "./manual/usage.md",
    "content": "# Usage\r\n\r\nTo find documentation on the possible options to pass, or methods & properties provided by the datasources, refer to the api documentation. Otherwise, below are usage examples to demonstrate how you may the datasource.\r\n\r\n## Array Datasource\r\n\r\nSee [Array Datasource](./array-datasource.html).\r\n\r\n## AJAX Datasource\r\n\r\nSee [AJAX Datasource](./ajax-datasource.html).\r\n\r\n## With Components\r\n\r\nIt's not only primitives that can be passed onto client-side framework components.\r\nObjects can be passed, meaning we can pass in the datasource objects, and the components' main responsibility is simply to wire up the UI to the datasource.\r\n\r\nWhen a component needs to perform pagination, filtering, sorting, it'll use the datasoure methods and properties.\r\n\r\n### Vue Example\r\n\r\nThis package has been tested to work with `Vue`. You can clone the repo and then take a look at the `mitch-datasource-test-vue` project folder. Alternatively, you can see below sandbox and code for a more simplified version which only has pagination.\r\n\r\n[![Edit mitch-datasource with Vue](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/vue-template-jv16s?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\nExample component `MinimalTable`, which uses the datasource (which gets passed to the component as a property) to display data and perform pagination logic:\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <div v-if=\"!datasource\" style=\"color: crimson;\">\r\n      No datasource supplied\r\n    </div>\r\n    <div v-else-if=\"componentData.loading\" style=\"color: crimson;\">\r\n      Loading...\r\n    </div>\r\n    <div v-else-if=\"!componentData.data || componentData.data.length <= 0\" style=\"color: crimson;\">\r\n      No data...\r\n    </div>\r\n    <table v-else>\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n          <th>Job</th>\r\n          <th>Gender</th>\r\n          <th>Has Citizenship?</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"item in componentData.data\" :key=\"item.id\">\r\n          <td>{{ item.id }}</td>\r\n          <td>{{ item.firstName }}</td>\r\n          <td>{{ item.lastName }}</td>\r\n          <td>{{ item.job }}</td>\r\n          <td>{{ item.gender }}</td>\r\n          <td>{{ item.hasCitizenship ? 'Yes' : 'No' }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <br/>\r\n    <table border=\"1\">\r\n      <tbody>\r\n        <tr>\r\n          <td>\r\n            <div>Page {{ componentData.page }} of {{ componentData.totalPages }}</div>\r\n            <div>Total: {{ componentData.total }}</div>\r\n            <div>Total Items on Page: {{ componentData.pageTotal }}</div>\r\n            <div>Size: {{ componentData.size }}</div>\r\n            <div>Offset: {{ componentData.offset }}</div>\r\n          </td>\r\n          <td>\r\n            <h4>Pagination</h4>\r\n            <div>\r\n              <button v-for=\"value in componentData.totalPages\" :key=\"value\" @click=\"goToPage(value)\">\r\n                {{value}}\r\n              </button>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    datasource: Object\r\n  },\r\n  data() {\r\n    return {\r\n      // Declare component states to sync up with the\r\n      // datasource properties and to display down the road\r\n      componentData: {\r\n        loading: false,\r\n        page: 0,\r\n        totalPages: 0,\r\n        total: 0,\r\n        pageTotal: 0,\r\n        size: 0,\r\n        offset: 0,\r\n        searchText: 0,\r\n        searchArguments: {},\r\n        sortArguments: {},\r\n        data: [],\r\n      }\r\n    }\r\n  },\r\n  created: async function () {\r\n    this.syncComponentWithDatasource();\r\n    this.$props.datasource.on('updatestart', this.syncComponentWithDatasource);\r\n    this.$props.datasource.on('updateend', this.syncComponentWithDatasource);\r\n  },\r\n  beforeDestroy: function() {\r\n    this.$props.datasource.off('updatestart', this.syncComponentWithDatasource);\r\n    this.$props.datasource.off('updateend', this.syncComponentWithDatasource);\r\n  },\r\n  methods: {\r\n    syncComponentWithDatasource() {\r\n      if (!this.$props.datasource) {\r\n        return;\r\n      }\r\n      this.componentData = {\r\n        loading: this.$props.datasource.loading,\r\n        page: this.$props.datasource.page,\r\n        totalPages: this.$props.datasource.totalPages,\r\n        total: this.$props.datasource.total,\r\n        pageTotal: this.$props.datasource.pageTotal,\r\n        size: this.$props.datasource.size,\r\n        offset: this.$props.datasource.offset,\r\n        searchText: this.$props.datasource.searchText,\r\n        searchArguments: this.$props.datasource.searchArguments,\r\n        sortArguments: this.$props.datasource.sortArguments,\r\n        data: this.$props.datasource.data,\r\n      };\r\n    },\r\n    async goToPage(page) {\r\n      let success = await this.$props.datasource.goToPage(page);\r\n      if (!success) {\r\n        alert(`Failed to go to page ${page}...`);\r\n      }\r\n    },\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nThe typical `App` component. It declares and initiates a datasource, and then pass it as a property to the `MinimalTable` component.\r\n\r\n```html\r\n<template>\r\n  <div id=\"app\">\r\n    <MinimalTable :datasource=\"datasource\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import { ArrayDatasource } from 'mitch-datasource'\r\n  import MinimalTable from './components/MinimalTable.vue'\r\n\r\n  export default {\r\n    name: 'app',\r\n    data() {\r\n      let datasource = new ArrayDatasource({\r\n        data: [\r\n          {\r\n            id: 1,\r\n            firstName: 'John',\r\n            lastName: 'Smith'\r\n          },\r\n          {\r\n            id: 2,\r\n            firstName: 'Mary',\r\n            lastName: 'Jane'\r\n          },\r\n          // ... More\r\n        ]\r\n      });\r\n      datasource.update();\r\n      return {\r\n        datasource\r\n      };\r\n    },\r\n    components: {\r\n      MinimalTable\r\n    }\r\n  }\r\n</script>\r\n```\r\n\r\n### React Example\r\n\r\nThis package has been tested to work with `React`. You can clone the repo and then take a look at the `mitch-datasource-test-react` project folder. Alternatively, you can see below sandbox and code for a more simplified version which only has pagination.\r\n\r\n[![Edit mitch-datasource-react](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/heuristic-chandrasekhar-j9wrg?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\nExample component `MinimalTable`, which uses the datasource (which gets passed to the component as a property) to display data and perform pagination logic:\r\n\r\n```jsx\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\n\r\nexport default function(props) {\r\n  // Declare component states to sync up with the\r\n  // datasource properties and to display down the road\r\n  const [componentData, setComponentData] = useState({\r\n    loading: false,\r\n    page: 0,\r\n    totalPages: 0,\r\n    total: 0,\r\n    pageTotal: 0,\r\n    size: 0,\r\n    offset: 0,\r\n    searchText: 0,\r\n    searchArguments: {},\r\n    sortArguments: {},\r\n    data: [],\r\n  });\r\n\r\n  // Syncs the component's state with the datasource\r\n  let syncComponentWithDatasource = useCallback(() => {\r\n    if (!props.datasource) {\r\n      return;\r\n    }\r\n    setComponentData({\r\n      page: props.datasource.page,\r\n      totalPages: props.datasource.totalPages,\r\n      total: props.datasource.total,\r\n      pageTotal: props.datasource.pageTotal,\r\n      size: props.datasource.size,\r\n      offset: props.datasource.offset,\r\n      data: props.datasource.data,\r\n    });\r\n  }, [props.datasource]);\r\n\r\n  // Attach listeners to sync component state\r\n  // when datasource's data changes\r\n  useEffect(() => {\r\n    syncComponentWithDatasource();\r\n    props.datasource.addListener('updatestart', syncComponentWithDatasource);\r\n    props.datasource.addListener('updateend', syncComponentWithDatasource);\r\n    \r\n    // Cleanup called on unmount event\r\n    return () => {\r\n      props.datasource.removeListener('updatestart', syncComponentWithDatasource);\r\n      props.datasource.removeListener('updateend', syncComponentWithDatasource);\r\n    }\r\n  }, [props.datasource, syncComponentWithDatasource]);\r\n\r\n  let goToPage = useCallback(async page => {\r\n    let success = await props.datasource.goToPage(page);\r\n    if (!success) {\r\n      alert(`Failed to go to page ${page}...`);\r\n    }\r\n  }, [props.datasource]);\r\n\r\n  if (!props.datasource) {\r\n    return <div style={{ color: \"crimson\" }}>No datasource supplied</div>;\r\n  } else if (!componentData.data || componentData.data.length <= 0) {\r\n    return <div style={{ color: 'crimson' }}> No data... </div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>First Name</th>\r\n              <th>Last Name</th>\r\n              <th>Job</th>\r\n              <th>Gender</th>\r\n              <th>Has Citizenship?</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {componentData.data.map(function(value, index, arr) {\r\n              return (\r\n                <tr key={value.id}>\r\n                  <td>{value.id}</td>\r\n                  <td>{value.firstName}</td>\r\n                  <td>{value.lastName}</td>\r\n                  <td>{value.job}</td>\r\n                  <td>{value.gender}</td>\r\n                  <td>{value.hasCitizenship ? \"Yes\" : \"No\"}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <br />\r\n        <table border=\"1\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <div>\r\n                  Page {componentData.page} of {componentData.totalPages}\r\n                </div>\r\n                <div>Total: {componentData.total}</div>\r\n                <div>Total Items on Page: {componentData.pageTotal}</div>\r\n                <div>Size: {componentData.size}</div>\r\n                <div>Offset: {componentData.offset}</div>\r\n              </td>\r\n              <td>\r\n                <h4>Pagination</h4>\r\n                <div>\r\n                  {\r\n                    [...Array(componentData.totalPages).keys()].map((value) => {\r\n                      const pageNumber = value + 1;\r\n                      return <button key={pageNumber} onClick={() => { goToPage(pageNumber) }}>{pageNumber}</button>;\r\n                    })\r\n                  }\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nThe typical `App` component. It declares and initiates a datasource, and then pass it as a property to the `MinimalTable` component.\r\n\r\n```jsx\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MinimalTable from \"./components/MinimalTable/MinimalTable\";\r\nimport { ArrayDatasource } from \"mitch-datasource\";\r\nimport stubData from \"./stub-data\";\r\n\r\nfunction App() {\r\n  let datasource = new ArrayDatasource({\r\n    data: stubData\r\n  });\r\n  datasource.update();\r\n  return (\r\n    <div className=\"App\">\r\n      <MinimalTable datasource={datasource} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\n## Modifying the Defaults\r\n\r\nYou can modify the default options for any datasource. For example, for `ArrayDatasource`, you can provide a default sorting logic.\r\n\r\nYou can create a new file called `ArrayDatasource.js` in your project, which simply imports the original `ArrayDatasource` and override the defaults, then exports the redefined ArrayDatasource.\r\n\r\n```javascript\r\n  import { ArrayDatasource } from 'mitch-datasource';\r\n\r\n  ArrayDatasource.prototype.defaults.sort = function(data, sortArguments = { 'firstName': 'asc' }) {\r\n    let sortedData = { ...data }; // Clone data, so sorting doesn't affect the original object\r\n    // Perform sorting operations here\r\n    return sortedData;\r\n  };\r\n  \r\n  export default ArrayDatasource;\r\n```\r\n\r\nThen, in another file, you can import the redefined `ArrayDatasource`\r\nfrom `ArrayDatasource.js` file, and use it as follows:\r\n\r\n```javascript\r\n\r\nimport ArrayDatasource from './ArrayDatasource';\r\n\r\nlet datasource = new ArrayDatasource({\r\n  data: stubData\r\n});\r\nawait datasource.sort();\r\nconsole.log(`First page of data: ${JSON.stringify(datasource.data)}`);\r\n```\r\n\r\n## Making your own Custom Datasource\r\n\r\n\r\n## Additional Information\r\n\r\nFor more information on the usage:\r\n* Open up and view the example files inside the repository for:\r\n  * [Unit Tests](https://github.com/deltoss/mitch-datasource/mitch-datasource-test/src)\r\n  * [React Example](https://github.com/deltoss/mitch-datasource/mitch-datasource-test-react/src)\r\n  * [Vue Example](https://github.com/deltoss/mitch-datasource/mitch-datasource-test-vue/src)\r\n* Refer to the API documentations.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\Git Repositories\\Packages\\mitch-datasource\\projects\\mitch-datasource-documentation\\manual\\array-datasource.md",
    "name": "./manual/array-datasource.md",
    "content": "# Array Datasource\r\n\r\n```javascript\r\nimport { ArrayDatasource } from 'mitch-datasource';\r\n\r\nlet datasource = new ArrayDatasource({\r\n  data: [\r\n    {\r\n      id: 1,\r\n      firstName: 'John',\r\n      lastName: 'Smith'\r\n    },\r\n    {\r\n      id: 2,\r\n      firstName: 'Mary',\r\n      lastName: 'Jane'\r\n    },\r\n    // ... More\r\n  ]\r\n});\r\nawait datasource.update();\r\nconsole.log(`First page of data: ${JSON.stringify(datasource.data)}`);\r\n```\r\n\r\n## Sorting\r\n\r\nTo perform sorting, you'll need to perform the below adjustments to your datasource:\r\n- Provide a `sort` function to the datasource options, which performs sorting on your dataset. It contains the below parameters:\r\n  Parameter Name | Type | Description\r\n  --- | --- | ---\r\n  `data` | `Array` | The data to sort\r\n  `sortArguments` | `*` | The sort arguments. Can be any type. It depends on what gets passed when the datasource `sort` method gets called.\r\n- Call the datasource `sort` method, or alternatively, set the `sortArguments` property of the datasource, and then call the datasource `update` method.\r\n\r\nSee below example on defining the `sort` function for the datasource options.\r\n\r\n```javascript\r\nlet datasource = new ArrayDatasource({\r\n  data: [\r\n    {\r\n      id: 1,\r\n      firstName: 'John',\r\n      lastName: 'Smith'\r\n    },\r\n    {\r\n      id: 2,\r\n      firstName: 'Mary',\r\n      lastName: 'Jane'\r\n    },\r\n    // ... More\r\n  ],\r\n  sort: function(data, sortArguments = { 'firstName': 'asc' }) {\r\n    // Clone data so you don't accidentally sort\r\n    // the original object\r\n    let sortedData = [ ...data ];\r\n    // Perform sorting operations on the array of data here\r\n    if (sortArguments['lastName'] \r\n      && sortArguments['lastName'].toLowerCase().indexOf('asc') > 0) {\r\n      sortedData.sort((a, b) => {\r\n        if (a['lastName'] > b['lastName']) {\r\n          return 1;\r\n        }\r\n        if (a['lastName'] < b['lastName']) {\r\n          return -1;\r\n        }\r\n      });\r\n    } else if (sortArguments['lastName'] \r\n      && sortArguments['lastName'].toLowerCase().indexOf('desc') > 0) {\r\n      sortedData.sort((a, b) => {\r\n        if (a['lastName'] <> b['lastName']) {\r\n          return 1;\r\n        }\r\n        if (a['lastName'] > b['lastName']) {\r\n          return -1;\r\n        }\r\n      });\r\n    }\r\n    return sortedData;\r\n  }\r\n});\r\n```\r\n\r\nNow with your datasource, simply call `sort`. Note that you can pass in anything to the `sort` call, and it'll get directly passed to the `sort` callback above as the `sortArguments` parameter.\r\n\r\n```javascript\r\nawait datasource.sort({ 'lastName': 'asc' });\r\n```\r\n\r\n## Multi-Column Sorting\r\n\r\nThe datasource can be configured for multi-column sorting. Recall the above sorting example works by passing the argument you provided in the datasource `sort` method to the `sort` callback. You can pass in anything to the `sort` call, and it'll get directly passed to the `sort` callback above as the `sortArguments` parameter. This means you can pass in a complex object that specifies how to do your multi-column sorting.\r\n\r\nTake for example:\r\n\r\n```javascript\r\nawait datasource.sort({ 'firstName': 'desc', 'lastName': 'asc' });\r\n```\r\n\r\nAnd then you can specify in the `sort` callback as follows:\r\n\r\n```javascript\r\nlet datasource = new ArrayDatasource({\r\n  // ...\r\n  sort: function(data, sortArguments = { 'firstName': 'asc' }) {\r\n    // Clone data so you don't accidentally sort\r\n    // the original object\r\n    let sortedData = [ ...data ];\r\n    \r\n    // This will output: { 'firstName': 'desc', 'lastName': 'asc' }\r\n    console.log(sortArguments);\r\n    // ... Perform multi-column sorting\r\n    \r\n    return sortedData;\r\n  }\r\n});\r\n```\r\n\r\nFor an in-depth example, see the below projects of the repository which has multi-column sorting:\r\n* `mitch-datasource-test`\r\n* `mitch-datasource-test-react`\r\n* `mitch-datasource-test-vue`\r\n\r\n## Filtering\r\n\r\nTo perform filtering, you'll need to perform the below adjustments to your datasource:\r\n- Provide a `search` function to the datasource options, which performs filtering on your dataset. It contains the below parameters:\r\n  Parameter Name | Type | Description\r\n  --- | --- | ---\r\n  `data` | `Array` | The data to sort\r\n  `searchArguments` | `*` | The search arguments. Can be any type. It depends on what gets passed when the datasource `search` method gets called.\r\n- Call the datasource `search` method, or alternatively, set the `searchArguments` property of the datasource, and then call the datasource `update` method.\r\n\r\nSee below example on defining the `search` function for the datasource options.\r\n\r\n```javascript\r\nlet datasource = new ArrayDatasource({\r\n  data: [\r\n    {\r\n      id: 1,\r\n      firstName: 'John',\r\n      lastName: 'Smith'\r\n    },\r\n    {\r\n      id: 2,\r\n      firstName: 'Mary',\r\n      lastName: 'Jane'\r\n    },\r\n    // ... More\r\n  ],\r\n  search: function(data, searchArguments) {\r\n    if (!searchArguments) {\r\n      return data;\r\n    }\r\n    return data.filter((value) => {\r\n      // Simple search logic by doing\r\n      // a text search on the concatenation\r\n      // of all the searchable fields\r\n      const searchableText = `${value.firstName\r\n      } ${value.lastName\r\n      } ${value.job\r\n      } ${value.gender}`;\r\n      return searchableText.indexOf(searchArguments) > -1;\r\n    });\r\n  }\r\n});\r\n```\r\n\r\nNow with your datasource, simply call `search`. Note that you can pass in anything to the `search` call, and it'll get directly passed to the `search` callback above as the `searchArguments` parameter.\r\n\r\n```javascript\r\n// ...\r\nawait datasource.search('John');\r\n// ...\r\n```\r\n\r\nAlternatively, you can use:\r\n```javascript\r\n// ...\r\ndatasource.searchArguments = 'John';\r\nawait datasource.update();\r\n// ...\r\n```\r\n\r\n## Multi-Column Filtering\r\n\r\nThe datasource can be configured for multi-column filtering. Recall the above filtering example works by passing the argument you provided in the datasource `search` method to the `search` callback. You can pass in anything to the `search` call, and it'll get directly passed to the `search` callback above as the `searchArguments` parameter. This means you can pass in a complex object that specifies how to do your multi-column sorting.\r\n\r\nTake for example:\r\n\r\n```javascript\r\nawait datasource.search({ 'firstName': 'John', 'lastName': 'Smith' });\r\n```\r\n\r\nAnd then you can specify in the `search` callback as follows:\r\n\r\n```javascript\r\nlet datasource = new ArrayDatasource({\r\n  // ...\r\n  search: function(data, searchArguments) {\r\n    if (!searchArguments) {\r\n      return data;\r\n    }\r\n    // Clone data so you don't accidentally filter\r\n    // the original object\r\n    let filteredData = [ ...data ];\r\n    \r\n    // This will output: { 'firstName': 'John', 'lastName': 'Smith' }\r\n    console.log(searchArguments);\r\n    // ... Perform multi-column filtering\r\n    \r\n    return filteredData;\r\n  }\r\n});\r\n```\r\n\r\nFor an in-depth example, see the below projects of the repository which has multi-column searching:\r\n* `mitch-datasource-test`\r\n* `mitch-datasource-test-react`\r\n* `mitch-datasource-test-vue`\r\n\r\n## Events\r\n\r\nEvent Name | Description\r\n--- | ---\r\n`updatestart` | Fired when the update has started, i.e. before the datasource has completed all the data minipulation operations (e.g. sorting, filtering & pagination).\r\n`updateend` | Fired when the update has completed, i.e. after the datasource has completed all the data minipulation operations (e.g. sorting, filtering & pagination).\r\n\r\n### Update Start\r\n\r\nYou can attach to the `updatestart` event with a callback function that accepts an objects with the following fields:\r\n\r\nParameter Name | Type | Description\r\n--- | --- |---\r\n`sender` | `Object` | The sender (i.e. the datasource) that triggered this event.\r\n`preventDefault` | `Function` | You can call this to prevent/cancel the data minipulation (e.g. sorting, filtering & pagination) operations.\r\n`prevented` | `boolean` | You can set this to true to prevent/cancel the data minipulation (e.g. sorting, filtering & pagination) operations. Note that using `preventDefault` is preferred, and is more similar to common DOM events.\r\n\r\nFor example:\r\n\r\n```javascript\r\nlet datasource = new ArrayDatasource(dsOptions);\r\ndatasource.on('updatestart', function(e) {\r\n  e.preventDefault(); // This stops it from actually updating\r\n  console.log(e);\r\n});\r\nconst updateResponse = await datasource.update();\r\nconsole.log(updateResponse); // null\r\n```\r\n\r\n### Update End\r\n\r\nYou can attach to the `updateend` event with a callback function that accepts an objects with the following fields:\r\n\r\nParameter Name | Type | Description\r\n--- | --- |---\r\n`sender` | `Object` | The sender (i.e. the datasource) that triggered this event.\r\n`response` | `Array` | The array of data after the data manipulation operations (e.g. sorting, filtering & pagination).\r\n\r\n\r\n```javascript\r\n  let datasource = new ArrayDatasource(dsOptions);\r\n  datasource.on('updateend', function(e) {\r\n    console.log(e);\r\n  });\r\n  const updateResponse = await datasource.update();\r\n  console.log(updateResponse); // updateResponse && e.response is the same object\r\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\Git Repositories\\Packages\\mitch-datasource\\projects\\mitch-datasource-documentation\\manual\\ajax-datasource.md",
    "name": "./manual/ajax-datasource.md",
    "content": "# Ajax Datasource\r\n\r\nAJAX Datasource is configured to contact a remote endpoint.\r\nGiven an endpoint, by default, it'll pass the below parameters either as query string, or as part of the request data:\r\n\r\nParameter Name | Type | Optional | Description\r\n--- | --- | --- | ---\r\n`offset` | `Number` | No | The pagination offset. It skips the specified amount of items when querying.\r\n`page` | `Number` | No | The page number for data pagination.\r\n`size` | `Number` | No | The pagination size, i.e. the number of records per page.\r\n`searchText` | `String` | Yes | The text to search for. Used to filter the data items.\r\n`sortArguments` | `JSON` | Yes | The sort arguments object, for specific or multi-column sorting purposes. Will be sent to the server as a JSON object.\r\n`searchArguments` | `JSON` | Yes | The search arguments object, for specific or multi-column searching purposes. Will be sent to the server as a JSON object.\r\n\r\n__Optional__ with values of yes means it won't be included in the request if there's no value set for it.\r\n\r\n## Minimal Configuration:\r\n\r\n```javascript\r\nimport { AjaxDatasource } from 'mitch-datasource';\r\n\r\nlet datasource = new AjaxDatasource({\r\n  ajax: 'https://path/to/remote/endpoint'\r\n});\r\nawait datasource.update();\r\nconsole.log(`First page of data: ${JSON.stringify(datasource.data)}`);\r\n```\r\n\r\n## With Mapper\r\n\r\nIf your remote endpoint doesn't return data in an expected format for the datasource, then you can use the `mapper` option of the AJAX datasource:\r\n\r\n```javascript\r\nimport { AjaxDatasource } from 'mitch-datasource';\r\n\r\nlet datasource = new AjaxDatasource({\r\n  ajax: {\r\n    // Note pagination/sorting/filtering doesn't\r\n    // work with this fake endpoint, as even when\r\n    // we send the datasource parameters, the\r\n    // remote endpoint won't actually vary\r\n    // the returned dataset.\r\n    url: 'https://jsonplaceholder.typicode.com/posts',\r\n    method: 'get',\r\n    // ... Other Axios options\r\n    // `mapper` is a custom option unique to the datasource package,\r\n    // it's not actually part of Axios\r\n    mapper: function(response) {\r\n      return {\r\n        data: response.data,\r\n        total: response.data.length,\r\n      }\r\n    }\r\n  }\r\n});\r\nawait datasource.update();\r\nconsole.log(`First page of data: ${JSON.stringify(datasource.data)}`);\r\n```\r\n\r\n## Sorting\r\n\r\nAJAX datasource perform sortings operations through sending sort parameters to the remote endpoint so it can perform the actual sorting operations.\r\n\r\nFor example, when you use below line of code:\r\n\r\n```javascript\r\n  let datasource = new AjaxDatasource({ ajax: '<RemoteEndpoint>' });\r\n  await datasource.sort({ 'lastName': 'asc' });\r\n  console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\r\n```\r\n\r\nThe datasource will make a AJAX request to the remote endpoint with the follwoing URL as follows, if the datasource is configured for GET requests:\r\n\r\n```\r\n<RemoteEndpoint>?<PaginationParameters>&sortArguments=%7B%lastName%22%3A%22asc%22%7D\r\n```\r\n\r\nEssentially, the sort arguments gets converted to JSON so it can be sent to the remote endpoint. It's up to the remote endpoint to convert it to an object, or do whatever with it to perform the actual sort operations, returning the sorted data.\r\n\r\n## Multi-Column Sorting\r\n\r\nTo perform multiple column sorting, simply provide a complex object for sorting. The object can have any parameters as long as your remote endpoint handles it accordingly. For example:\r\n\r\n```javascript\r\n  let datasource = new AjaxDatasource({ ajax: '<RemoteEndpoint>' });\r\n  await datasource.sort({ 'firstName': 'desc', 'lastName': 'asc' });\r\n  console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\r\n```\r\n\r\nThis would then make a request to the remote endpoint, passing the complex object as JSON. For example, if your datasource is configured for GET requests:\r\n\r\n```\r\n<RemoteEndpoint>?<PaginationParameters>&\r\nsortArguments=%7B%22firstName%22%3A%22desc%22%2C%22lastName%22%3A%22asc%22%7D\r\n```\r\n\r\n## Filtering\r\n\r\nAJAX datasource perform filterings operations through sending search parameters to the remote endpoint so it can perform the actual filtering operations.\r\n\r\nFor example, when you use below line of code:\r\n\r\n```javascript\r\n  let datasource = new AjaxDatasource({ ajax: '<RemoteEndpoint>' });\r\n  await datasource.search('John');\r\n  console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\r\n```\r\n\r\nThe datasource will make a AJAX request to the remote endpoint with the follwoing URL as follows, if the datasource is configured for GET requests:\r\n\r\n```\r\n<RemoteEndpoint>?<PaginationParameters>&searchArguments=john\r\n```\r\n\r\nNote that if you provide an object to the search method as a argument, it'll be converted to JSON so it can be sent to the remote endpoint.\r\n\r\nFor example:\r\n\r\n```javascript\r\n  let datasource = new AjaxDatasource({ ajax: '<RemoteEndpoint>' });\r\n  await datasource.search({'searchText':'John'});\r\n  console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\r\n```\r\n\r\nThe above would make a HTTP request in the below format:\r\n\r\n```\r\n<RemoteEndpoint>?<PaginationParameters>&searchArguments=%7B%searchText%22%3A%22John%22%7D\r\n```\r\n\r\n## Multi-Column Filtering\r\n\r\nTo perform multiple column filtering, simply provide a complex object for filtering. The object can have any parameters as long as your remote endpoint handles it accordingly. For example:\r\n\r\n```javascript\r\n  let datasource = new AjaxDatasource({ ajax: '<RemoteEndpoint>' });\r\n  await datasource.search({ 'firstName': 'John', 'lastName': 'Smith' });\r\n  console.log(`First page of data: ${JSON.stringify(datasource.data)}`);\r\n```\r\n\r\nThis would then make a request to the remote endpoint, passing the complex object as JSON. For example, if your datasource is configured for GET requests:\r\n\r\n```\r\n<RemoteEndpoint>?<PaginationParameters>&\r\nsearchArguments=%7B%22firstName%22%3A%22John%22%2C%22lastName%22%3A%22Smith%22%7D\r\n```\r\n\r\n## Overriding AJAX\r\n\r\nThe `ajax` option can take in either a:\r\n- `String` representing the url of remote endpoint.\r\n- `Function` representing a callback function when data is requested.\r\n- `Object` with various AJAX options. See the `AjaxDatasource` API docs for more details.\r\n\r\nTake for example, if you want to perform sorting/filtering locally, you can do this by overriding the `ajax` option with your own function that performs AJAX operations, but performs sorting/filtering locally.\r\n\r\nFor example:\r\n\r\n```javascript\r\nlet datasource = new AjaxDatasource({\r\n  ajax: async (queryBuilder) => {\r\n    // Perform remote AJAX\r\n    let data = await $.get(\"<remoteEndpoint>?\" + queryBuilder.getQueryString());\r\n    let sortArgs = this.sortArguments;\r\n    let filterArgs = this.filterArguments;\r\n    // ... Now perform local sorting/filtering operations against data\r\n    return data;\r\n  }\r\n});\r\n```\r\n\r\n## QueryBuilder\r\n\r\n### Adjust Parameters to Send\r\n\r\nIf you want to adjust the parameters passed to the remote endpoint, you can provide the QueryBuilder instance passed to the AJAX datasource, with the `serialiseToQueryObject` callback configured.\r\n\r\nWithin that callback, you can rename your parameters, or adjust the values.\r\n\r\n```javascript\r\nimport { AjaxDatasource, QueryBuilder } from 'mitch-datasource';\r\n\r\nlet datasource = new AjaxDatasource({\r\n  // ...\r\n  queryBuilder: new QueryBuilder({\r\n    // ...\r\n    serialiseToQueryObject(datasource) {\r\n      // Calls the original default serialiser\r\n      let queryObject = QueryBuilder.prototype\r\n                        .defaults.serialiseToQueryObject(datasource);\r\n      // E.g. We want to rename the parameter\r\n      // 'offset', to 'start'.\r\n      queryObject.start = queryObject.offset;\r\n      delete queryObject.offset;\r\n\r\n      return queryObject;\r\n    }\r\n  })\r\n});\r\n```\r\n\r\n### Full Options\r\n\r\n```javascript\r\nimport { AjaxDatasource, QueryBuilder } from 'mitch-datasource';\r\n\r\nlet datasource = new AjaxDatasource({\r\n  // ...\r\n  queryBuilder: new QueryBuilder({\r\n    // ...\r\n    serialiseToQueryObject(datasource) {\r\n      // Calls the original default serialiser\r\n      let queryObject = QueryBuilder.prototype\r\n                        .defaults.serialiseToQueryObject(datasource);\r\n      // ... Do your additional operations\r\n      return queryObject;\r\n    },\r\n    serialiseToQueryString(objectToSerialise) {\r\n      // Calls the original default serialiser\r\n      let queryString = QueryBuilder.prototype\r\n                        .defaults.serialiseToQueryString(objectToSerialise);\r\n      // ... Do your additional operations\r\n      return queryString;\r\n    },\r\n    queryStringOptions: {\r\n      // Keep the default options\r\n      ...QueryBuilder.prototype.defaults.queryStringOptions,\r\n      // ... Put additional options here. It'll override default options\r\n      // For available options, check the docs for QueryBuilder constructor\r\n    }\r\n  })\r\n});\r\n```\r\n\r\n## Events\r\n\r\nEvent Name | Description\r\n--- | ---\r\n`updatestart` | Fired when the update has started, i.e. before the datasource has sent the request to the remote endpoint.\r\n`updateend` | Fired when the update has completed, i.e. after the datasource has sent the request to the remote endpoint, and when the remote endpoint providede a response.\r\n`requeststart` | Fired when the AJAX handler has been cosntructed, and request is about to be sent to the remote endpoint.\r\n`requestend` | Fired when the AJAX request has been completed, and raw response has been received from the server.\r\n\r\n### Update Start\r\n\r\nYou can attach to the `updatestart` event with a callback function that accepts an objects with the following fields:\r\n\r\nParameter Name | Type | Description\r\n--- | --- |---\r\n`sender` | `Object` | The sender (i.e. the datasource) that triggered this event.\r\n`preventDefault` | `Function` | You can call this to prevent/cancel the request to the remote endpoint.\r\n`prevented` | `boolean` | You can set this to true to prevent/cancel the request to the remote endpoint. Note that using `preventDefault` is preferred, and is more similar to common DOM events.\r\n\r\nFor example:\r\n\r\n```javascript\r\nlet datasource = new AjaxDatasource(dsOptions);\r\ndatasource.on('updatestart', function(e) {\r\n  e.preventDefault(); // This stops it from actually updating\r\n  console.log(e);\r\n});\r\nconst updateResponse = await datasource.update();\r\nconsole.log(updateResponse); // null\r\n```\r\n\r\n### Update End\r\n\r\nYou can attach to the `updateend` event with a callback function that accepts an objects with the following fields:\r\n\r\nParameter Name | Type | Description\r\n--- | --- |---\r\n`sender` | `Object` | The sender (i.e. the datasource) that triggered this event.\r\n`response` | `*` | The response from the remote endpoint.\r\n\r\n\r\n```javascript\r\nlet datasource = new AjaxDatasource(dsOptions);\r\ndatasource.on('updateend', function(e) {\r\n  console.log(e);\r\n});\r\nconst updateResponse = await datasource.update();\r\nconsole.log(updateResponse); // updateResponse && e.response is the same object\r\n```\r\n\r\n### Request Start\r\n\r\nYou can attach to the `requeststart` event with a callback function that accepts an objects with the following fields:\r\n\r\nParameter Name | Type | Description\r\n--- | --- |---\r\n`sender` | `Object` | The sender (i.e. the datasource) that triggered this event.\r\n`preventDefault` | `Function` | You can call this to prevent/cancel the request to the remote endpoint.\r\n`prevented` | `boolean` | You can set this to true to prevent/cancel the request to the remote endpoint. Note that using `preventDefault` is preferred, and is more similar to common DOM events.\r\n`ajaxHandler` | `Function` | The function to handle the AJAX call. This can be changed if you want to modify how the ajax call is handled.\r\n\r\n```javascript\r\nlet datasource = new AjaxDatasource(dsOptions);\r\ndatasource.on('requeststart', function(e) {\r\n  e.preventDefault(); // This stops it from actually sending AJAX request and updating the data\r\n  console.log(e);\r\n});\r\nconst updateResponse = await datasource.update();\r\nconsole.log(updateResponse);\r\n```\r\n\r\n### Request End\r\n\r\ndatasource.on('requestend', function(e) {\r\nYou can attach to the `requeststart` event with a callback function that accepts an objects with the following fields:\r\n\r\nParameter Name | Type | Description\r\n--- | --- |---\r\n`sender` | `Object` | The sender (i.e. the datasource) that triggered this event.\r\n`response` | `*` | The response from the remote endpoint.\r\n\r\n```javascript\r\nlet datasource = new AjaxDatasource(dsOptions);\r\ndatasource.on('requestend', function(e) {\r\n  console.log(e);\r\n});\r\nconst updateResponse = await datasource.update();\r\nconsole.log(updateResponse);\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\Git Repositories\\Packages\\mitch-datasource\\projects\\mitch-datasource-documentation\\manual\\development.md",
    "name": "./manual/development.md",
    "content": "# Development\r\n\r\n## Overview\r\n\r\nThis repository contains multiple projects. Each project has a specific set of responsibilities. The main project is `mitch-datasource`, which contains the base source code.\r\n\r\nProject Name | Description\r\n--- | ---\r\n`mitch-datasource` | The code datasource codebase. The NPM package is deployed from this folder.\r\n`mitch-datasource-documentation` | The project to generate the documentation from the codebase and markdown files. That is, it generates the current documentation which you are viewing right now.\r\n`mitch-datasource-test` | Performs automated tests for the core datasource codebase.\r\n`mitch-datasource-test-react` | A playground application (using storybook) so integration tests with React can be manually performed. Manual tests can also be done here.\r\n`mitch-datasource-test-vue` | A playground application (using storybook) so integration tests with Vue can be manually performed. Manual tests can also be done here.\r\n`mitch-datasource-test-utilities` | Contains the core code for testing purposes, such as mocks, or stub data.\r\n\r\nThe relationship between all the above projects can be illustrated as per below:\r\n\r\n![mitch-datasource architecture diagram](asset/Architecture.png)\r\n\r\nEach project has their own set of scripts which you can run. However, for general use,\r\nyou can simply just use the scripts located at the root of this repository in `package.json`.\r\nThese scripts run convenient tasks when developing the application, and saves you the trouble of switching directories/terminals to execute individual scripts for each project.\r\n\r\n### Commit Messages\r\n\r\n#### Needs to Be In Certain Format\r\n\r\nWhen making any GIT commits to this repository or a branch, it needs to be in a certain format (i.e. **Angular Commit Message Conventions**). This is because the `semantic-release` tool which this package uses relies on having a specific format of commit messages for it to evaluate whether to create a release, or not.\r\n\r\nFor more information, see the [semantic-release docs](https://github.com/semantic-release/semantic-release#commit-message-format).\r\n\r\n#### Easier Way to Write Commit Messages\r\n\r\nTo assist making commits to the repository in that certain format, `commitizen` is installed at the root of the repo. To use it after you downloaded the repository:\r\n\r\n1. Open up terminal\r\n2. Change the working directory to the root of the repo\r\n3. Enter the command `git add .` to stage all files. \r\n4. Enter the command `npm run commit`, and follow the prompts for it to construct a commit message for you.\r\n5. Enter the command `git push` to push to the remote.\r\n\r\nNote that steps 3 & 5 can be substituted through a GIT GUI tool (e.g. SourceTree). You can use a GUI to stage and push files to remote. However, ensure that you don't use the default commit command or commit of the GUI tool. You must use `npm run commit`.\r\n\r\n## Deployment\r\n\r\n### CI/CD\r\n\r\n![mitch-datasource CI/CD flow diagram](asset/CircleCI%20Workflow.png)\r\n\r\nThis package has a CI/CD pipeline with CircleCI configured. It has a workflow setup to use `semantic-release` so that if it detect any commits that requires a release (e.g. adding a new feature, breaking changes, fixes, etc), it'll perform various release related tasks including:\r\n\r\n* Tagging the latest commit with vX.X.X\r\n* Create a GitHub release (auto-generating the documentation)\r\n* Publish to NPM package registry\r\n\r\nHowever, this works through commit messages, so all commits, aside from merges needs to be under a certain format. For more information, see the section [Commit Messages](#commit-messages).\r\n\r\n### Monorepo\r\n\r\nThis repository is essentially a monorepo as it has multiple projects. However only one project is released (i.e. the `mitch-datasource`) as a package. The others are for testing, documentation and various other purposes.\r\n\r\n`semantic-release` doesn't support monorepos out-of-the-box. However, there are solutions for this. For more information see this [GitHub issue](https://github.com/semantic-release/semantic-release/issues/193).\r\n\r\nTo get `semantic-release` to work for mono repos, i.e. this repository, there are a few approaches. This repository took the approach mentioned in this [GitHub issue comment](https://github.com/semantic-release/semantic-release/issues/193#issuecomment-355418830).\r\n\r\nAlthough this is a monorepo, it doesn't have multiple packages to release and publish. This package only releases a single project as a package. Thus, the `circleci` configuration was setup in such a way where it simply changes directory and then runs `semantic-release` in that directory.\r\n\r\n## Services Used when Developing this Package\r\n\r\n* `CircleCI` For CI/CD pipeline to publish to NPM.\r\n* `GitHub` To host the source code\r\n* `NPM Registry` To upload the node package and make it available as a node package\r\n* `Netlify` To host the static HTML documentation\r\n\r\n### Dependencies\r\n\r\n* [axios](https://www.axios.com)\r\n  * Used to perform default AJAX operations\r\n* [query-string](https://github.com/sindresorhus/query-string#readme)\r\n  * For `QueryBuilder` (Used as part of `AJAX Datasource`) to convert an object to a query string\r\n\r\n### Development Dependencies\r\n\r\nThis package was created using:\r\n* `semantic-release` to automate the release process to NPM, and creating git releases. Isn't actually an installed package, but used as part of the CI/CD CircleCI configuration as a CLI tool (called through npx). See the root `.circleci/config.yml` & `.circleci/notes.txt` for more details\r\n* `commitizen` which ensures commits is in a nice format. See `commit` script of the main repository scripts\r\n* `webpack` as the bundler\r\n* `npm` scripts to run common tasks (e.g. build and sass compilation), instead of gulp, grunt\r\n* `babel` with webpack to transpile JavaScript from ES6 & ES7 to ES5, so this package codebase can utilise the newest ES features\r\n* `esdoc` to build the API documentations\r\n* `eslint` for linting JavaScript source code\r\n* `nodemon` to set up npm watch scripts (to auto-compile when code changes are detected)\r\n* `npm-run-all` to run multiple npm scripts in sequence/parallel whilst being compatible cross operating systems (e.g. Windows, Linux, etc)\r\n* `jest` for running tests\r\n* `storybook` to develop playground applications to perform manual integration tests with client-side frameworks (e.g. React, Vue)\r\n* `esm` to use modern ES import/export syntax (for executing node scripts without the need for webpack)\r\n* `mermaid cli` to generate mermaid diagrams using markdownish syntax (i.e. `.mmd` files)\r\n* `glob` retrieve all files within a folder matching an expression\r\n\r\n## Repository Scripts\r\n\r\n### Installation Scripts\r\n\r\nTo run the script, simply open up terminal and change directory to where the root `package.json` resides.\r\nAfterwards, simply type in `npm run <ScriptName>`. For example, `npm run install`.\r\n\r\nScript Name | Description\r\n--- | ---\r\n`install` | Performs an `npm install` for every projects inside the `projects` folder.\r\n`update` | Performs an `npm update` for every projects inside the `projects` folder.\r\n`exec-all-projects` | Performs a specified command for every projects inside the `projects` folder. For example `npm run exec-all-projects -- \"npm outdated\"`.\r\n\r\n### Main Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`dev` | Lint, test, build/compile the code and docs using development settings.\r\n`prd` | Lint, test, build/compile the code and docs using production settings.\r\n`watch` | Lint, test, build/compile the code and docs using development settings when a relevant file has been changed.\r\n`storybook` | Runs the storybook applications for Vue & React. For manual integration tests with client-side frameworks (e.g. React, Vue).\r\n\r\n### Other Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`docs-build` | Build the documentation.\r\n`docs-watch` | Build the documentation when a relevant file has been changed.\r\n`code-dev` | Lint and build the code using development settings.\r\n`code-prd` | Lint and build the code using production settings.\r\n`code-watch` | Lint and build the code using development settings when a relevant file has been changed.\r\n`test-utilities-dev` | Lint and build the test utilities project with development settings.\r\n`test-utilities-prd` | Lint and build the test utilities project with production settings.\r\n`test-utilities-watch` | Lint and build the test utilities project with development settings when a relevant file has been changed.\r\n`test` | Run tests.\r\n`test-watch` | Run tests when a relevant file has been changed.\r\n`react-storybook` | Runs the storybook application for React. For manual integration tests with client-side frameworks (e.g. React, Vue).\r\n`vue-storybook` | Runs the storybook application for Vue. For manual integration tests with client-side frameworks (e.g. React, Vue).\r\n`commit` | Uses `commitizen` to create a angular styled commit message. Useful for `semantic-release`.\r\n\r\n## Projects\r\n\r\n### mitch-datasource\r\n\r\nThe main project containing the source code for mitch-datasource.\r\nThis project is published as a package to NPM registry.\r\n\r\n#### Available NPM Scripts\r\n\r\n##### Main Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`dev` | Lint, build code & docs with development settings.\r\n`prd` | Lint, build code & docs with production settings.\r\n`watch` | Lint, build code & docs with development settings anytime when a change has been detected.\r\n\r\n##### Other Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`dev` | Lint and build the code with development settings.\r\n`prd` | Lint and build the code with production settings.\r\n`watch` | Lint and build code with development settings anytime when a change has been detected.\r\n`webpack-watch` | Build code anytime when a change has been detected.\r\n`webpack-build-dev` | Build code with development settings.\r\n`webpack-build-prd` | Build code with production settings.\r\n`lint` | Lint the source code, finding any errors or code smells.\r\n`lint-watch` | Lint the source code anytime when a change has been detected.\r\n`lint-fix` | Automatically fix any auto-fixable warnings or errors detected when linting.\r\n\r\n### mitch-datasource-documentation\r\n\r\nGenerates the HTML documentation based on source code in the `mitch-datasource` project, and the markdown files in the `manual` folder. The built HTML documentation files will reside in the `docs` folder.\r\n\r\n#### Available NPM Scripts\r\n\r\n##### Main Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`build` | Generate Diagrams and then build the HTML documentation to the `docs` folder.\r\n`watch` | Generate Diagrams and then build the HTML documentation when a relevant file has been changed.\r\n\r\n##### Other Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`build-mermaid` | Generate diagrams to the `docs` folder.\r\n`watch-mermaid` | Generate diagrams when a relevant file has been changed (i.e. `.mmd` files in `manual/asset/`).\r\n`build-esdoc` | Build the HTML documentation to the `docs` folder.\r\n`watch-esdoc` | Build the HTML documentation when a relevant file has been changed.\r\n\r\n### mitch-datasource-test\r\n\r\nAutomated tests for the core codebase.\r\n\r\n#### Available NPM Scripts\r\n\r\n##### Main Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`test` | Run the `jest` tests.\r\n`test-debug` | Run the `jest` tests under debug mode which you can put breakpoints under.\r\n`test-watch` | Run the `jest` tests when a relevant file has been changed.\r\n`lint` | Lint the tests source code, finding any errors or code smells.\r\n`lint-fix` | Fixes the automatically fixable lint errors.\r\n\r\n### mitch-datasource-test-react\r\n\r\nBased on `Create React App`, but with storybook installed.\r\n\r\n#### Available NPM Scripts\r\n\r\n##### Main Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`storybook` | Runs the storybook application.\r\n\r\n##### Other Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`test` | Run React tests\r\n`build-storybook` | Exports the storybook as a static app.\r\n\r\n### mitch-datasource-test-vue\r\n\r\nInitially created with default stock Vue project. Storybook was installed afterwards.\r\n\r\n#### Available NPM Scripts\r\n\r\n##### Main Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`storybook` | Runs the storybook application.\r\n\r\n##### Other Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`lint` | Lint the Vue code.\r\n`build-storybook` | Exports the storybook as a static app.\r\n\r\n### mitch-datasource-test-utilities\r\n\r\nContains the core exports for testing purposes, such as mocks or data stubs.\r\n\r\n#### Available NPM Scripts\r\n\r\n##### Main Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`dev` | Performs linting and builds the codebase.\r\n`prd` | Performs linting and builds the codebase.\r\n`watch` | Performs linting and builds the codebase.\r\n`build-dev` | Performs linting and builds the codebase.\r\n`build-prd` | Performs linting and builds the codebase.\r\n`lint` | Lint the source code, finding any errors or code smells.\r\n`lint-watch` | Lint the source code anytime when a change has been detected.\r\n`lint-fix` | Automatically fix any auto-fixable warnings or errors detected when linting.\r\n\r\n##### Other Scripts\r\n\r\nScript Name | Description\r\n--- | ---\r\n`lint` | Lint the Vue code.\r\n`build-storybook` | Exports the storybook as a static app.",
    "static": true,
    "access": "public"
  }
]